/*
SQLyog 企业版 - MySQL GUI v8.14 
MySQL - 5.7.19-log : Database - db_blog
*********************************************************************
*/

/*!40101 SET NAMES utf8 */;

/*!40101 SET SQL_MODE=''*/;

/*!40014 SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0 */;
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;
/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;
/*!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 */;
CREATE DATABASE /*!32312 IF NOT EXISTS*/`db_blog` /*!40100 DEFAULT CHARACTER SET utf8 */;

USE `db_blog`;

/*Table structure for table `blog` */

DROP TABLE IF EXISTS `blog`;

CREATE TABLE `blog` (
  `blog_id` int(30) NOT NULL AUTO_INCREMENT,
  `title` varchar(200) DEFAULT NULL,
  `summary` varchar(400) DEFAULT NULL,
  `content` longtext,
  `clicks` int(30) DEFAULT '0',
  `comment_count` int(30) DEFAULT '0',
  `release_date` datetime DEFAULT NULL,
  `keyword` varchar(200) DEFAULT NULL,
  `type_id` int(30) DEFAULT NULL,
  PRIMARY KEY (`blog_id`),
  KEY `FK_blog` (`type_id`),
  CONSTRAINT `FK_blog` FOREIGN KEY (`type_id`) REFERENCES `blog_type` (`type_id`)
) ENGINE=InnoDB AUTO_INCREMENT=19 DEFAULT CHARSET=utf8;

/*Data for the table `blog` */

insert  into `blog`(`blog_id`,`title`,`summary`,`content`,`clicks`,`comment_count`,`release_date`,`keyword`,`type_id`) values (1,'Java 流(Stream)、文件(File)和IO','Java.io 包几乎包含了所有操作输入、输出需要的类。所有这些流类代表了输入源和输出目标。','Java.io 包几乎包含了所有操作输入、输出需要的类。所有这些流类代表了输入源和输出目标。\r\nJava.io 包中的流支持很多种格式，比如：基本类型、对象、本地化字符集等等。\r\n一个流可以理解为一个数据的序列。输入流表示从一个源读取数据，输出流表示向一个目标写数据。\r\nJava 为 I/O 提供了强大的而灵活的支持，使其更广泛地应用到文件传输和网络编程中。\r\n但本节讲述最基本的和流与 I/O 相关的功能。我们将通过一个个例子来学习这些功能。',3,0,'2016-08-22 18:57:45','IO',1),(2,'Java 教程','异常是程序中的一些错误，但并不是所有的错误都是异常，并且错误有时候是可以避免的。','异常是程序中的一些错误，但并不是所有的错误都是异常，并且错误有时候是可以避免的。\r\n比如说，你的代码少了一个分号，那么运行出来结果是提示是错误 java.lang.Error；如果你用System.out.println(11/0)，那么你是因为你用0做了除数，会抛出 java.lang.ArithmeticException 的异常。\r\n异常发生的原因有很多，通常包含以下几大类：\r\n用户输入了非法数据。\r\n要打开的文件不存在。\r\n网络通信时连接中断，或者JVM内存溢出。\r\n这些异常有的是因为用户错误引起，有的是程序错误引起的，还有其它一些是因为物理错误引起的。-\r\n要理解Java异常处理是如何工作的，你需要掌握以下三种类型的异常：\r\n检查性异常：最具代表的检查性异常是用户错误或问题引起的异常，这是程序员无法预见的。例如要打开一个不存在文件时，一个异常就发生了，这些异常在编译时不能被简单地忽略。\r\n运行时异常： 运行时异常是可能被程序员避免的异常。与检查性异常相反，运行时异常可以在编译时被忽略。\r\n错误： 错误不是异常，而是脱离程序员控制的问题。错误在代码中通常被忽略。例如，当栈溢出时，一个错误就发生了，它们在编译也检查不到的。',7,0,'2017-08-22 18:58:43','异常处理',1),(3,'Java 重写(Override)与重载(Overload)','Java 重写(Override)与重载(Overload)','方法的重写规则\r\n参数列表必须完全与被重写方法的相同；\r\n返回类型必须完全与被重写方法的返回类型相同；\r\n访问权限不能比父类中被重写的方法的访问权限更低。例如：如果父类的一个方法被声明为public，那么在子类中重写该方法就不能声明为protected。\r\n父类的成员方法只能被它的子类重写。\r\n声明为final的方法不能被重写。\r\n声明为static的方法不能被重写，但是能够被再次声明。\r\n子类和父类在同一个包中，那么子类可以重写父类所有方法，除了声明为private和final的方法。\r\n子类和父类不在同一个包中，那么子类只能够重写父类的声明为public和protected的非final方法。\r\n重写的方法能够抛出任何非强制异常，无论被重写的方法是否抛出异常。但是，重写的方法不能抛出新的强制性异常，或者比被重写方法声明的更广泛的强制性异常，反之则可以。\r\n构造方法不能被重写。\r\n如果不能继承一个方法，则不能重写这个方法。',4,0,'2015-08-23 12:10:23','方法重写 方法重载',2),(4,'Java 数据结构','Java工具包提供了强大的数据结构。在Java中的数据结构主要包括以下几种接口和类：','Java工具包提供了强大的数据结构。在Java中的数据结构主要包括以下几种接口和类：\r\n枚举（Enumeration）\r\n位集合（BitSet）\r\n向量（Vector）\r\n栈（Stack）\r\n字典（Dictionary）\r\n哈希表（Hashtable）\r\n属性（Properties）\r\n以上这些类是传统遗留的，在Java2中引入了一种新的框架-集合框架(Collection)，我们后面再讨论。\r\n枚举（Enumeration）\r\n枚举（Enumeration）接口虽然它本身不属于数据结构,但它在其他数据结构的范畴里应用很广。 枚举（The Enumeration）接口定义了一种从数据结构中取回连续元素的方式。\r\n例如，枚举定义了一个叫nextElement 的方法，该方法用来得到一个包含多元素的数据结构的下一个元素。\r\n关于枚举接口的更多信息，请参见枚举（Enumeration）。\r\n位集合（BitSet）\r\n位集合类实现了一组可以单独设置和清除的位或标志。\r\n该类在处理一组布尔值的时候非常有用，你只需要给每个值赋值一\"位\"，然后对位进行适当的设置或清除，就可以对布尔值进行操作了。\r\n关于该类的更多信息，请参见位集合（BitSet）。\r\n向量（Vector）\r\n向量（Vector）类和传统数组非常相似，但是Vector的大小能根据需要动态的变化。\r\n和数组一样，Vector对象的元素也能通过索引访问。\r\n使用Vector类最主要的好处就是在创建对象的时候不必给对象指定大小，它的大小会根据需要动态的变化。\r\n关于该类的更多信息，请参见向量(Vector)\r\n栈（Stack）\r\n栈（Stack）实现了一个后进先出（LIFO）的数据结构。\r\n你可以把栈理解为对象的垂直分布的栈，当你添加一个新元素时，就将新元素放在其他元素的顶部。\r\n当你从栈中取元素的时候，就从栈顶取一个元素。换句话说，最后进栈的元素最先被取出。\r\n关于该类的更多信息，请参见栈（Stack）。\r\n字典（Dictionary）\r\n字典（Dictionary） 类是一个抽象类，它定义了键映射到值的数据结构。\r\n当你想要通过特定的键而不是整数索引来访问数据的时候，这时候应该使用Dictionary。\r\n由于Dictionary类是抽象类，所以它只提供了键映射到值的数据结构，而没有提供特定的实现。\r\n关于该类的更多信息，请参见字典（ Dictionary）。\r\n哈希表（Hashtable）\r\nHashtable类提供了一种在用户定义键结构的基础上来组织数据的手段。\r\n例如，在地址列表的哈希表中，你可以根据邮政编码作为键来存储和排序数据，而不是通过人名。\r\n哈希表键的具体含义完全取决于哈希表的使用情景和它包含的数据。\r\n关于该类的更多信息，请参见哈希表（HashTable）。\r\n属性（Properties）\r\nProperties 继承于 Hashtable.Properties 类表示了一个持久的属性集.属性列表中每个键及其对应值都是一个字符串。\r\nProperties 类被许多Java类使用。例如，在获取环境变量时它就作为System.getProperties()方法的返回值。\r\n关于该类的更多信息，请参见属性（Properties）。',25,1,'2017-08-23 12:11:48','数据结构',2),(8,'Java虚拟机','首页所有文章资讯Web架构基础技术书籍教程Java小组工具资源- 导航条 -首页所有文章资讯Web架构基础技术书籍教程Java小组工具资源JVM内幕：Java虚拟机详解2016/02/05 | 分类： 基础技术 | 3 条评论 | 标签： JVM分享到：117本文由 ImportNew - 挖坑的张师傅 翻译','<header><p><a href=\"http://www.importnew.com/\" style=\"border: 0px; margin: 0px; padding: 0px; font-size: 13px; text-decoration-line: none; color: rgb(0, 153, 204); display: block;\"><img src=\"/ueditor/jsp/upload/image/20170825/1503633670508084047.png\" width=\"137\" height=\"85\" alt=\"ImportNew\"/></a></p><nav><ul class=\"menu sf-js-enabled list-paddingleft-2\" style=\"list-style-type: none;\"><li><p><a href=\"http://www.importnew.com/\" style=\"border: 0px; margin: 0px; padding: 0px 20px; text-decoration-line: none; color: rgb(51, 51, 51); display: inline-block; width: auto; position: relative; height: 40px; line-height: 40px;\">首页</a></p></li><li><p><a href=\"http://www.importnew.com/all-posts\" style=\"border: 0px; margin: 0px; padding: 0px 20px; text-decoration-line: none; color: rgb(51, 51, 51); display: inline-block; width: auto; position: relative; height: 40px; line-height: 40px;\">所有文章</a></p></li><li><p><a href=\"http://www.importnew.com/cat/news\" style=\"border: 0px; margin: 0px; padding: 0px 20px; text-decoration-line: none; color: rgb(51, 51, 51); display: inline-block; width: auto; position: relative; height: 40px; line-height: 40px;\">资讯</a></p></li><li><p><a href=\"http://www.importnew.com/cat/web-development\" style=\"border: 0px; margin: 0px; padding: 0px 20px; text-decoration-line: none; color: rgb(51, 51, 51); display: inline-block; width: auto; position: relative; height: 40px; line-height: 40px;\">Web</a></p></li><li><p><a href=\"http://www.importnew.com/cat/architecture\" style=\"border: 0px; margin: 0px; padding: 0px 20px; text-decoration-line: none; color: rgb(51, 51, 51); display: inline-block; width: auto; position: relative; height: 40px; line-height: 40px;\">架构</a></p></li><li><p><a href=\"http://www.importnew.com/cat/basic\" style=\"border: 0px; margin: 0px; padding: 0px 20px; text-decoration-line: none; color: rgb(51, 51, 51); display: inline-block; width: auto; position: relative; height: 40px; line-height: 40px;\">基础技术</a></p></li><li><p><a href=\"http://www.importnew.com/cat/books\" style=\"border: 0px; margin: 0px; padding: 0px 20px; text-decoration-line: none; color: rgb(51, 51, 51); display: inline-block; width: auto; position: relative; height: 40px; line-height: 40px;\">书籍</a></p></li><li><p><a href=\"http://www.importnew.com/cat/tutorial\" style=\"border: 0px; margin: 0px; padding: 0px 20px; text-decoration-line: none; color: rgb(51, 51, 51); display: inline-block; width: auto; position: relative; height: 40px; line-height: 40px;\">教程</a></p></li><li><p><a href=\"http://group.jobbole.com/category/tech/java/\" class=\"external\" target=\"_blank\" style=\"border: 0px; margin: 0px; padding: 0px 20px; text-decoration-line: none; color: rgb(51, 51, 51); display: inline-block; width: auto; position: relative; height: 40px; line-height: 40px;\">Java小组</a></p></li><li><p><a href=\"http://hao.jobbole.com/?catid=32\" class=\"external\" target=\"_blank\" style=\"border: 0px; margin: 0px; padding: 0px 20px; text-decoration-line: none; color: rgb(51, 51, 51); display: inline-block; width: auto; position: relative; height: 40px; line-height: 40px;\">工具资源</a></p></li></ul><p>- 导航条 -首页所有文章资讯Web架构基础技术书籍教程Java小组工具资源</p></nav></header><h1 style=\"border-width: 0px 0px 1px; border-top-style: initial; border-right-style: initial; border-bottom-style: solid; border-left-style: initial; border-top-color: initial; border-right-color: initial; border-bottom-color: rgb(232, 232, 232); border-left-color: initial; border-image: initial; margin: -5px 0px 10px; padding: 0px 0px 10px; font-size: 22px; font-weight: normal; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; text-align: center;\">JVM内幕：Java虚拟机详解</h1><p class=\"entry-meta-hide-on-mobile\" style=\"border: 0px; margin-top: 0px; padding: 0px; font-size: 12px;\">2016/02/05 | 分类：&nbsp;<a href=\"http://www.importnew.com/cat/basic\" title=\"查看 基础技术 中的全部文章\" style=\"border: 0px; margin: 0px; padding: 0px; font-size: 12px; text-decoration-line: none; color: rgb(153, 153, 153);\">基础技术</a>&nbsp;|&nbsp;<a href=\"http://www.importnew.com/17770.html#comments\" title=\"《JVM内幕：Java虚拟机详解》上的评论\" style=\"border: 0px; margin: 0px; padding: 0px; font-size: 12px; text-decoration-line: none; color: rgb(153, 153, 153);\">3 条评论</a>&nbsp;| 标签：&nbsp;<a href=\"http://www.importnew.com/tag/jvm\" style=\"border: 0px; margin: 0px; padding: 0px; font-size: 12px; text-decoration-line: none; color: rgb(153, 153, 153);\">JVM</a></p><p><span class=\"jiathis_txt\" style=\"border: 0px; margin: 0px; padding: 0px; font-size: 12px; vertical-align: middle; font-family: &quot;Microsoft YaHei&quot;, arial, tahoma, 宋体, sans-serif; float: left; line-height: 18px !important;\">分享到：</span><a class=\"jiathis_button_tsina\" title=\"分享到微博\" style=\"border: 0px; margin: 0px; padding: 0px; font-size: 12px;\"><span class=\"jiathis_txt jtico jtico_tsina\" style=\"border: 0px; margin: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; font-size: 12px; vertical-align: middle; font-family: &quot;Microsoft YaHei&quot;, arial, tahoma, 宋体, sans-serif; overflow: hidden; background-image: url(&quot;../images/jiathis_ico.png&quot;); background-position: 0px -96px; background-size: initial; background-repeat: no-repeat; background-attachment: initial; background-origin: initial; background-clip: initial; cursor: pointer; float: left; padding-left: 20px !important; display: block !important; height: 16px !important; line-height: 18px !important;\"></span></a><a class=\"jiathis_button_weixin\" title=\"分享到微信\" style=\"border: 0px; margin: 0px; padding: 0px; font-size: 12px;\"><span class=\"jiathis_txt jtico jtico_weixin\" style=\"border: 0px; margin: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; font-size: 12px; vertical-align: middle; font-family: &quot;Microsoft YaHei&quot;, arial, tahoma, 宋体, sans-serif; overflow: hidden; background-image: url(&quot;../images/jiathis_ico.png&quot;); background-position: 0px -1809px; background-size: initial; background-repeat: no-repeat; background-attachment: initial; background-origin: initial; background-clip: initial; cursor: pointer; float: left; padding-left: 20px !important; display: block !important; height: 16px !important; line-height: 18px !important;\"></span></a><a class=\"jiathis_button_qzone\" title=\"分享到QQ空间\" style=\"border: 0px; margin: 0px; padding: 0px; font-size: 12px;\"><span class=\"jiathis_txt jtico jtico_qzone\" style=\"border: 0px; margin: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; font-size: 12px; vertical-align: middle; font-family: &quot;Microsoft YaHei&quot;, arial, tahoma, 宋体, sans-serif; overflow: hidden; background-image: url(&quot;../images/jiathis_ico.png&quot;); background-position: 0px -64px; background-size: initial; background-repeat: no-repeat; background-attachment: initial; background-origin: initial; background-clip: initial; cursor: pointer; float: left; padding-left: 20px !important; display: block !important; height: 16px !important; line-height: 18px !important;\"></span></a><a class=\"jiathis_button_fb\" title=\"分享到Facebook\" style=\"border: 0px; margin: 0px; padding: 0px; font-size: 12px;\"><span class=\"jiathis_txt jtico jtico_fb\" style=\"border: 0px; margin: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; font-size: 12px; vertical-align: middle; font-family: &quot;Microsoft YaHei&quot;, arial, tahoma, 宋体, sans-serif; overflow: hidden; background-image: url(&quot;../images/jiathis_ico.png&quot;); background-position: 0px -688px; background-size: initial; background-repeat: no-repeat; background-attachment: initial; background-origin: initial; background-clip: initial; cursor: pointer; float: left; padding-left: 20px !important; display: block !important; height: 16px !important; line-height: 18px !important;\"></span></a><a class=\"jiathis_button_renren\" title=\"分享到人人网\" style=\"border: 0px; margin: 0px; padding: 0px; font-size: 12px;\"><span class=\"jiathis_txt jtico jtico_renren\" style=\"border: 0px; margin: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; font-size: 12px; vertical-align: middle; font-family: &quot;Microsoft YaHei&quot;, arial, tahoma, 宋体, sans-serif; overflow: hidden; background-image: url(&quot;../images/jiathis_ico.png&quot;); background-position: 0px -160px; background-size: initial; background-repeat: no-repeat; background-attachment: initial; background-origin: initial; background-clip: initial; cursor: pointer; float: left; padding-left: 20px !important; display: block !important; height: 16px !important; line-height: 18px !important;\"></span></a><a class=\"jiathis_button_douban\" title=\"分享到豆瓣\" style=\"border: 0px; margin: 0px; padding: 0px; font-size: 12px;\"><span class=\"jiathis_txt jtico jtico_douban\" style=\"border: 0px; margin: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; font-size: 12px; vertical-align: middle; font-family: &quot;Microsoft YaHei&quot;, arial, tahoma, 宋体, sans-serif; overflow: hidden; background-image: url(&quot;../images/jiathis_ico.png&quot;); background-position: 0px -560px; background-size: initial; background-repeat: no-repeat; background-attachment: initial; background-origin: initial; background-clip: initial; cursor: pointer; float: left; padding-left: 20px !important; display: block !important; height: 16px !important; line-height: 18px !important;\"></span></a><a class=\"jiathis_button_readitlater\" style=\"border: 0px; margin: 0px; padding: 0px; font-size: 12px;\"></a><a class=\"jiathis_button_evernote\" title=\"分享到印象笔记\" style=\"border: 0px; margin: 0px; padding: 0px; font-size: 12px;\"><span class=\"jiathis_txt jtico jtico_evernote\" style=\"border: 0px; margin: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; font-size: 12px; vertical-align: middle; font-family: &quot;Microsoft YaHei&quot;, arial, tahoma, 宋体, sans-serif; overflow: hidden; background-image: url(&quot;../images/jiathis_ico.png&quot;); background-position: 0px -1120px; background-size: initial; background-repeat: no-repeat; background-attachment: initial; background-origin: initial; background-clip: initial; cursor: pointer; float: left; padding-left: 20px !important; display: block !important; height: 16px !important; line-height: 18px !important;\"></span></a><a class=\"jiathis_button_ydnote\" title=\"分享到有道云笔记\" style=\"border: 0px; margin: 0px; padding: 0px; font-size: 12px;\"><span class=\"jiathis_txt jtico jtico_ydnote\" style=\"border: 0px; margin: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; font-size: 12px; vertical-align: middle; font-family: &quot;Microsoft YaHei&quot;, arial, tahoma, 宋体, sans-serif; overflow: hidden; background-image: url(&quot;../images/jiathis_ico.png&quot;); background-position: 0px -848px; background-size: initial; background-repeat: no-repeat; background-attachment: initial; background-origin: initial; background-clip: initial; cursor: pointer; float: left; padding-left: 20px !important; display: block !important; height: 16px !important; line-height: 18px !important;\"></span></a><a href=\"http://www.jiathis.com/share?uid=1745061\" class=\"jiathis jiathis_txt jiathis_separator jtico jtico_jiathis\" target=\"_blank\" style=\"border: 0px; margin: 0px 5px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; font-size: 12px; text-decoration-line: none; color: rgb(153, 153, 153); overflow: hidden; background-image: url(&quot;../images/jiathis_ico.png&quot;); background-position: 0px -1408px; background-size: initial; background-repeat: no-repeat; background-attachment: initial; background-origin: initial; background-clip: initial; cursor: pointer; display: block; float: left; padding-left: 20px !important; height: 16px !important; line-height: 16px !important;\"></a><a class=\"jiathis_counter_style\" style=\"border: 0px; margin: 0px; padding: 0px; font-size: 12px;\"><span class=\"jiathis_button_expanded jiathis_counter jiathis_bubble_style\" style=\"border: 0px; margin: 0px 0px 0px -2px; padding: 0px 0px 0px 4px; font-size: 11px; vertical-align: middle; font-family: arial, helvetica, sans-serif; float: left; font-weight: bold; color: rgb(86, 86, 86); cursor: pointer; display: block; text-align: center; background-image: url(&quot;../images/counter.gif&quot;); background-position: 0px -64px; background-size: initial; background-repeat: no-repeat; background-attachment: initial; background-origin: initial; background-clip: initial; height: 16px; line-height: 16px !important; width: 32px !important;\">117</span></a></p><p>本文由&nbsp;<a href=\"http://www.importnew.com/\" style=\"border: 0px; margin: 0px; padding: 0px; text-decoration-line: none; color: rgb(0, 153, 204);\">ImportNew</a>&nbsp;-&nbsp;<a href=\"http://www.importnew.com/author/brother18\" style=\"border: 0px; margin: 0px; padding: 0px; text-decoration-line: none; color: rgb(0, 153, 204);\">挖坑的张师傅</a>&nbsp;翻译自&nbsp;<a target=\"_blank\" href=\"http://blog.jamesdbloom.com/JVMInternals.html\" class=\"external\" style=\"border: 0px; margin: 0px; padding: 0px; text-decoration-line: none; color: rgb(0, 153, 204);\">jamesdbloom</a>。欢迎加入<a href=\"http://group.jobbole.com/category/feedback/trans-team/\" class=\"external\" target=\"_blank\" style=\"border: 0px; margin: 0px; padding: 0px; text-decoration-line: none; color: rgb(0, 153, 204);\">翻译小组</a>。转载请见文末要求。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px;\"><span style=\"border: 0px; margin: 0px; padding: 0px;\">这篇文章解释了Java 虚拟机（JVM）的内部架构。下图显示了遵守<a href=\"http://www.amazon.co.uk/Virtual-Machine-Specification-Edition-Series/dp/0133260445\" class=\"external\" target=\"_blank\" style=\"border: 0px; margin: 0px; padding: 0px; text-decoration-line: none; color: rgb(0, 153, 204);\">&nbsp;Java SE 7 规范</a>的典型的 JVM 核心内部组件。</span></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px;\"><a href=\"http://www.importnew.com/?attachment_id=17773\" style=\"border: 0px; margin: 0px; padding: 0px; text-decoration-line: none; color: rgb(0, 153, 204);\"><img class=\"aligncenter size-large wp-image-17773\" title=\"JVM_Internal_Architecture_small\" src=\"/ueditor/jsp/upload/image/20170825/1503633670629094574.png\" alt=\"\"/></a></p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px;\">&nbsp;</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px;\"><span style=\"border: 0px; margin: 0px; padding: 0px;\">上图显示的组件分两个章节解释。第一章讨论针对每个线程创建的组件，第二章节讨论了线程无关组件。</span></p><ul style=\"border: 0px; margin-bottom: 20px; padding: 0px; list-style-position: inside; list-style-image: initial;\" class=\" list-paddingleft-2\"><li><p>线程</p></li><ul style=\"list-style-type: square;\" class=\" list-paddingleft-2\"><li><p>JVM 系统线程</p></li><li><p>每个线程相关的</p></li><li><p>程序计数器</p></li><li><p>栈</p></li><li><p>本地栈</p></li><li><p>栈限制</p></li><li><p>栈帧</p></li><li><p>局部变量数组</p></li><li><p>操作数栈</p></li><li><p>动态链接</p></li></ul><li><p>线程共享</p></li><ul style=\"list-style-type: square;\" class=\" list-paddingleft-2\"><li><p>堆</p></li><li><p>内存管理</p></li><li><p>非堆内存</p></li><li><p>即时编译</p></li><li><p>方法区</p></li><li><p>类文件结构</p></li><li><p>类加载器</p></li><li><p>更快的类加载</p></li><li><p>方法区在哪里</p></li><li><p>类加载器参考</p></li><li><p>运行时常量池</p></li><li><p>异常表</p></li><li><p>符号表</p></li><li><p>Interned 字符串</p></li></ul></ul><h2 style=\"border: 0px; margin: -9px 0px 20px; padding: 0px; font-size: 24px; font-weight: normal; font-stretch: normal; line-height: 36px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;\"><span style=\"border: 0px; margin: 0px; padding: 0px; font-size: 28px; font-family: &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 42px;\">线程</span></h2><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px;\"><span style=\"border: 0px; margin: 0px; padding: 0px;\">这里所说的线程指程序执行过程中的一个线程实体。JVM 允许一个应用并发执行多个线程。Hotspot JVM 中的 Java 线程与原生操作系统线程有直接的映射关系。当线程本地存储、缓冲区分配、同步对象、栈、程序计数器等准备好以后，就会创建一个操作系统原生线程。Java 线程结束，原生线程随之被回收。操作系统负责调度所有线程，并把它们分配到任何可用的 CPU 上。当原生线程初始化完毕，就会调用 Java 线程的 run() 方法。run() 返回时，被处理未捕获异常，原生线程将确认由于它的结束是否要终止 JVM 进程（比如这个线程是最后一个非守护线程）。当线程结束时，会释放原生线程和 Java 线程的所有资源。</span></p><h3 style=\"border: 0px; margin: -8px 0px 20px; padding: 0px; font-size: 20px; font-weight: normal; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;\">JVM 系统线程</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px;\">如果使用 jconsole 或者其它调试器，你会看到很多线程在后台运行。这些后台线程与触发 public static void main(String[]) 函数的主线程以及主线程创建的其他线程一起运行。Hotspot JVM 后台运行的系统线程主要有下面几个：</p><table width=\"609\"><tbody style=\"border: 0px; margin: 0px; padding: 0px;\"><tr style=\"border-width: 0px 0px 1px; border-top-style: initial; border-right-style: initial; border-bottom-style: solid; border-left-style: initial; border-top-color: initial; border-right-color: initial; border-bottom-color: rgb(232, 232, 232); border-left-color: initial; border-image: initial; margin: 0px; padding: 0px;\" class=\"firstRow\"><td width=\"20%\" style=\"border-width: 0px; border-style: initial; border-color: initial; margin: 0px; padding-right: 5px; padding-left: 5px; vertical-align: middle; text-align: center;\">虚拟机线程（VM thread）</td><td style=\"border-width: 0px; border-style: initial; border-color: initial; margin: 0px; padding-right: 5px; padding-left: 5px; vertical-align: middle; text-align: center;\">这个线程等待 JVM 到达安全点操作出现。这些操作必须要在独立的线程里执行，因为当堆修改无法进行时，线程都需要 JVM 位于安全点。这些操作的类型有：stop-the-world 垃圾回收、线程栈 dump、线程暂停、线程偏向锁（biased locking）解除。</td></tr><tr style=\"border-width: 0px 0px 1px; border-top-style: initial; border-right-style: initial; border-bottom-style: solid; border-left-style: initial; border-top-color: initial; border-right-color: initial; border-bottom-color: rgb(232, 232, 232); border-left-color: initial; border-image: initial; margin: 0px; padding: 0px;\"><td style=\"border-width: 0px; border-style: initial; border-color: initial; margin: 0px; padding-right: 5px; padding-left: 5px; vertical-align: middle; text-align: center;\">周期性任务线程</td><td style=\"border-width: 0px; border-style: initial; border-color: initial; margin: 0px; padding-right: 5px; padding-left: 5px; vertical-align: middle; text-align: center;\">这线程负责定时器事件（也就是中断），用来调度周期性操作的执行。</td></tr><tr style=\"border-width: 0px 0px 1px; border-top-style: initial; border-right-style: initial; border-bottom-style: solid; border-left-style: initial; border-top-color: initial; border-right-color: initial; border-bottom-color: rgb(232, 232, 232); border-left-color: initial; border-image: initial; margin: 0px; padding: 0px;\"><td style=\"border-width: 0px; border-style: initial; border-color: initial; margin: 0px; padding-right: 5px; padding-left: 5px; vertical-align: middle; text-align: center;\">GC 线程</td><td style=\"border-width: 0px; border-style: initial; border-color: initial; margin: 0px; padding-right: 5px; padding-left: 5px; vertical-align: middle; text-align: center;\">这些线程支持 JVM 中不同的垃圾回收活动。</td></tr><tr style=\"border-width: 0px 0px 1px; border-top-style: initial; border-right-style: initial; border-bottom-style: solid; border-left-style: initial; border-top-color: initial; border-right-color: initial; border-bottom-color: rgb(232, 232, 232); border-left-color: initial; border-image: initial; margin: 0px; padding: 0px;\"><td style=\"border-width: 0px; border-style: initial; border-color: initial; margin: 0px; padding-right: 5px; padding-left: 5px; vertical-align: middle; text-align: center;\">编译器线程</td><td style=\"border-width: 0px; border-style: initial; border-color: initial; margin: 0px; padding-right: 5px; padding-left: 5px; vertical-align: middle; text-align: center;\">这些线程在运行时将字节码动态编译成本地平台相关的机器码。</td></tr><tr style=\"border-width: 0px 0px 1px; border-top-style: initial; border-right-style: initial; border-bottom-style: solid; border-left-style: initial; border-top-color: initial; border-right-color: initial; border-bottom-color: rgb(232, 232, 232); border-left-color: initial; border-image: initial; margin: 0px; padding: 0px;\"><td style=\"border-width: 0px; border-style: initial; border-color: initial; margin: 0px; padding-right: 5px; padding-left: 5px; vertical-align: middle; text-align: center;\">信号分发线程</td><td style=\"border-width: 0px; border-style: initial; border-color: initial; margin: 0px; padding-right: 5px; padding-left: 5px; vertical-align: middle; text-align: center;\">这个线程接收发送到 JVM 的信号并调用适当的 JVM 方法处理。</td></tr></tbody></table><h2 style=\"border: 0px; margin: -9px 0px 20px; padding: 0px; font-size: 24px; font-weight: normal; font-stretch: normal; line-height: 36px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;\"><span style=\"border: 0px; margin: 0px; padding: 0px; font-size: 24px; font-family: &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 36px;\">线程相关组件</span></h2><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px;\"><span style=\"border: 0px; margin: 0px; padding: 0px;\">每个运行的线程都包含下面这些组件：</span></p><h3 style=\"border: 0px; margin: -8px 0px 20px; padding: 0px; font-size: 20px; font-weight: normal; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;\"><span style=\"border: 0px; margin: 0px; padding: 0px; font-size: 24px; font-family: &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; line-height: 36px;\">程序计数器（PC）</span></h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px;\">PC 指当前指令（或操作码）的地址，本地指令除外。如果当前方法是 native 方法，那么PC 的值为 undefined。所有的 CPU 都有一个 PC，典型状态下，每执行一条指令 PC 都会自增，因此 PC 存储了指向下一条要被执行的指令地址。JVM 用 PC 来跟踪指令执行的位置，PC 将实际上是指向方法区（Method Area）的一个内存地址。</p><h3 style=\"border: 0px; margin: -8px 0px 20px; padding: 0px; font-size: 20px; font-weight: normal; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;\">栈（Stack）</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px;\">每个线程拥有自己的栈，栈包含每个方法执行的栈帧。栈是一个后进先出（LIFO）的数据结构，因此当前执行的方法在栈的顶部。每次方法调用时，一个新的栈帧创建并压栈到栈顶。当方法正常返回或抛出未捕获的异常时，栈帧就会出栈。除了栈帧的压栈和出栈，栈不能被直接操作。所以可以在堆上分配栈帧，并且不需要连续内存。</p><h3 style=\"border: 0px; margin: -8px 0px 20px; padding: 0px; font-size: 20px; font-weight: normal; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;\">Native栈</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px;\">并非所有的 JVM 实现都支持本地（native）方法，那些提供支持的 JVM 一般都会为每个线程创建本地方法栈。如果 JVM 用 C-linkage 模型实现 JNI（Java Native Invocation），那么本地栈就是一个 C 的栈。在这种情况下，本地方法栈的参数顺序、返回值和典型的 C 程序相同。本地方法一般来说可以（依赖 JVM 的实现）反过来调用 JVM 中的 Java 方法。这种 native 方法调用 Java 会发生在栈（一般是 Java 栈）上；线程将离开本地方法栈，并在 Java 栈上开辟一个新的栈帧。</p><h3 style=\"border: 0px; margin: -8px 0px 20px; padding: 0px; font-size: 20px; font-weight: normal; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;\">栈的限制</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px;\">栈可以是动态分配也可以固定大小。如果线程请求一个超过允许范围的空间，就会抛出一个StackOverflowError。如果线程需要一个新的栈帧，但是没有足够的内存可以分配，就会抛出一个 OutOfMemoryError。</p><h3 style=\"border: 0px; margin: -8px 0px 20px; padding: 0px; font-size: 20px; font-weight: normal; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;\">栈帧（Frame）</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px;\">每次方法调用都会新建一个新的栈帧并把它压栈到栈顶。当方法正常返回或者调用过程中抛出未捕获的异常时，栈帧将出栈。更多关于异常处理的细节，可以参考下面的异常信息表章节。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px;\">每个栈帧包含：</p><ul style=\"border: 0px; margin-bottom: 20px; padding: 0px; list-style-position: inside; list-style-image: initial;\" class=\" list-paddingleft-2\"><li><p>局部变量数组</p></li><li><p>返回值</p></li><li><p>操作数栈</p></li><li><p>类当前方法的运行时常量池引用</p></li></ul><h3 style=\"border: 0px; margin: -8px 0px 20px; padding: 0px; font-size: 20px; font-weight: normal; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;\">局部变量数组</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px;\">局部变量数组包含了方法执行过程中的所有变量，包括 this 引用、所有方法参数、其他局部变量。对于类方法（也就是静态方法），方法参数从下标 0 开始，对于对象方法，位置0保留为 this。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px;\">有下面这些局部变量：</p><ul style=\"border: 0px; margin-bottom: 20px; padding: 0px; list-style-position: inside; list-style-image: initial;\" class=\" list-paddingleft-2\"><li><p>boolean</p></li><li><p>byte</p></li><li><p>char</p></li><li><p>long</p></li><li><p>short</p></li><li><p>int</p></li><li><p>float</p></li><li><p>double</p></li><li><p>reference</p></li><li><p>returnAddress</p></li></ul><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px;\">除了 long 和 double 类型以外，所有的变量类型都占用局部变量数组的一个位置。long 和 double 需要占用局部变量数组两个连续的位置，因为它们是 64 位双精度，其它类型都是 32 位单精度。</p><h3 style=\"border: 0px; margin: -8px 0px 20px; padding: 0px; font-size: 20px; font-weight: normal; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;\">操作数栈</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px;\">操作数栈在执行字节码指令过程中被用到，这种方式类似于原生 CPU 寄存器。大部分 JVM 字节码把时间花费在操作数栈的操作上：入栈、出栈、复制、交换、产生消费变量的操作。因此，局部变量数组和操作数栈之间的交换变量指令操作通过字节码频繁执行。比如，一个简单的变量初始化语句将产生两条跟操作数栈交互的字节码。</p><table width=\"620\"><tbody style=\"border: 0px !important; margin: 0px !important; padding: 0px !important; font-size: 12px !important; border-radius: 0px !important; background: none !important; bottom: auto !important; float: none !important; height: auto !important; left: auto !important; line-height: 1.1em !important; outline: 0px !important; overflow: visible !important; position: static !important; right: auto !important; top: auto !important; vertical-align: baseline !important; width: auto !important; box-sizing: content-box !important; min-height: auto !important;\"><tr style=\"border: 0px !important; margin: 0px !important; padding: 0px !important; font-size: 12px !important; border-radius: 0px !important; background: none !important; bottom: auto !important; float: none !important; height: auto !important; left: auto !important; line-height: 1.1em !important; outline: 0px !important; overflow: visible !important; position: static !important; right: auto !important; top: auto !important; vertical-align: baseline !important; width: auto !important; box-sizing: content-box !important; min-height: auto !important;\" class=\"firstRow\"><td class=\"gutter\" style=\"border-width: 0px !important; border-style: initial !important; border-color: initial !important; margin: 0px !important; padding: 0px !important; font-size: 12px !important; vertical-align: baseline !important; border-radius: 0px !important; background: none !important; bottom: auto !important; float: none !important; left: auto !important; line-height: 1.1em !important; outline: 0px !important; overflow: visible !important; position: static !important; right: auto !important; top: auto !important; box-sizing: content-box !important; min-height: auto !important; color: rgb(175, 175, 175) !important;\" width=\"NaN\"><div class=\"line number1 index0 alt2\" style=\"border-width: 0px 3px 0px 0px !important; border-top-style: initial !important; border-right-style: solid !important; border-bottom-style: initial !important; border-left-style: initial !important; border-top-color: initial !important; border-right-color: rgb(108, 226, 108) !important; border-bottom-color: initial !important; border-left-color: initial !important; border-image: initial !important; margin: 0px !important; padding: 0px 0.5em 0px 1em !important; font-size: 12px !important; border-radius: 0px !important; background-image: none !important; background-position: initial !important; background-size: initial !important; background-repeat: initial !important; background-attachment: initial !important; background-origin: initial !important; background-clip: initial !important; bottom: auto !important; float: none !important; height: auto !important; left: auto !important; line-height: 1.1em !important; outline: 0px !important; overflow: visible !important; position: static !important; right: auto !important; text-align: right !important; top: auto !important; vertical-align: baseline !important; width: auto !important; box-sizing: content-box !important; min-height: auto !important; white-space: pre !important;\">1</div></td><td class=\"code\" style=\"border-width: 0px !important; border-style: initial !important; border-color: initial !important; margin: 0px !important; padding: 0px !important; font-size: 12px !important; vertical-align: baseline !important; border-radius: 0px !important; background: none !important; bottom: auto !important; float: none !important; left: auto !important; line-height: 1.1em !important; outline: 0px !important; overflow: visible !important; position: static !important; right: auto !important; top: auto !important; box-sizing: content-box !important; min-height: auto !important;\" width=\"592\"><div class=\"line number1 index0 alt2\" style=\"border: 0px !important; margin: 0px !important; padding: 0px 1em !important; font-size: 12px !important; border-radius: 0px !important; background-image: none !important; background-position: initial !important; background-size: initial !important; background-repeat: initial !important; background-attachment: initial !important; background-origin: initial !important; background-clip: initial !important; bottom: auto !important; float: none !important; height: auto !important; left: auto !important; line-height: 1.1em !important; outline: 0px !important; overflow: visible !important; position: static !important; right: auto !important; top: auto !important; vertical-align: baseline !important; width: auto !important; box-sizing: content-box !important; min-height: auto !important; white-space: pre !important;\"><code class=\"java keyword\" style=\"border: 0px !important; margin: 0px !important; padding: 0px !important; font-size: 12px !important; font-family: Consolas, &quot;Bitstream Vera Sans Mono&quot;, &quot;Courier New&quot;, Courier, monospace !important; border-radius: 0px !important; background: none !important; bottom: auto !important; float: none !important; height: auto !important; left: auto !important; line-height: 1.1em !important; outline: 0px !important; overflow: visible !important; position: static !important; right: auto !important; top: auto !important; vertical-align: baseline !important; width: auto !important; box-sizing: content-box !important; font-weight: bold !important; min-height: auto !important; color: rgb(0, 102, 153) !important;\">int</code> <code class=\"java plain\" style=\"border: 0px !important; margin: 0px !important; padding: 0px !important; font-size: 12px !important; font-family: Consolas, &quot;Bitstream Vera Sans Mono&quot;, &quot;Courier New&quot;, Courier, monospace !important; border-radius: 0px !important; background: none !important; bottom: auto !important; float: none !important; height: auto !important; left: auto !important; line-height: 1.1em !important; outline: 0px !important; overflow: visible !important; position: static !important; right: auto !important; top: auto !important; vertical-align: baseline !important; width: auto !important; box-sizing: content-box !important; min-height: auto !important;\">i;</code></div></td></tr></tbody></table><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px;\"><span style=\"border: 0px; margin: 0px; padding: 0px;\">被编译成下面的字节码：</span></p><table width=\"620\"><tbody style=\"border: 0px !important; margin: 0px !important; padding: 0px !important; font-size: 12px !important; border-radius: 0px !important; background: none !important; bottom: auto !important; float: none !important; height: auto !important; left: auto !important; line-height: 1.1em !important; outline: 0px !important; overflow: visible !important; position: static !important; right: auto !important; top: auto !important; vertical-align: baseline !important; width: auto !important; box-sizing: content-box !important; min-height: auto !important;\"><tr style=\"border: 0px !important; margin: 0px !important; padding: 0px !important; font-size: 12px !important; border-radius: 0px !important; background: none !important; bottom: auto !important; float: none !important; height: auto !important; left: auto !important; line-height: 1.1em !important; outline: 0px !important; overflow: visible !important; position: static !important; right: auto !important; top: auto !important; vertical-align: baseline !important; width: auto !important; box-sizing: content-box !important; min-height: auto !important;\" class=\"firstRow\"><td class=\"gutter\" style=\"border-width: 0px !important; border-style: initial !important; border-color: initial !important; margin: 0px !important; padding: 0px !important; font-size: 12px !important; vertical-align: baseline !important; border-radius: 0px !important; background: none !important; bottom: auto !important; float: none !important; left: auto !important; line-height: 1.1em !important; outline: 0px !important; overflow: visible !important; position: static !important; right: auto !important; top: auto !important; box-sizing: content-box !important; min-height: auto !important; color: rgb(175, 175, 175) !important;\" width=\"NaN\"><div class=\"line number1 index0 alt2\" style=\"border-width: 0px 3px 0px 0px !important; border-top-style: initial !important; border-right-style: solid !important; border-bottom-style: initial !important; border-left-style: initial !important; border-top-color: initial !important; border-right-color: rgb(108, 226, 108) !important; border-bottom-color: initial !important; border-left-color: initial !important; border-image: initial !important; margin: 0px !important; padding: 0px 0.5em 0px 1em !important; font-size: 12px !important; border-radius: 0px !important; background-image: none !important; background-position: initial !important; background-size: initial !important; background-repeat: initial !important; background-attachment: initial !important; background-origin: initial !important; background-clip: initial !important; bottom: auto !important; float: none !important; height: auto !important; left: auto !important; line-height: 1.1em !important; outline: 0px !important; overflow: visible !important; position: static !important; right: auto !important; text-align: right !important; top: auto !important; vertical-align: baseline !important; width: auto !important; box-sizing: content-box !important; min-height: auto !important; white-space: pre !important;\">1</div><div class=\"line number2 index1 alt1\" style=\"border-width: 0px 3px 0px 0px !important; border-top-style: initial !important; border-right-style: solid !important; border-bottom-style: initial !important; border-left-style: initial !important; border-top-color: initial !important; border-right-color: rgb(108, 226, 108) !important; border-bottom-color: initial !important; border-left-color: initial !important; border-image: initial !important; margin: 0px !important; padding: 0px 0.5em 0px 1em !important; font-size: 12px !important; border-radius: 0px !important; background-image: none !important; background-position: initial !important; background-size: initial !important; background-repeat: initial !important; background-attachment: initial !important; background-origin: initial !important; background-clip: initial !important; bottom: auto !important; float: none !important; height: auto !important; left: auto !important; line-height: 1.1em !important; outline: 0px !important; overflow: visible !important; position: static !important; right: auto !important; text-align: right !important; top: auto !important; vertical-align: baseline !important; width: auto !important; box-sizing: content-box !important; min-height: auto !important; white-space: pre !important;\">2</div></td><td class=\"code\" style=\"border-width: 0px !important; border-style: initial !important; border-color: initial !important; margin: 0px !important; padding: 0px !important; font-size: 12px !important; vertical-align: baseline !important; border-radius: 0px !important; background: none !important; bottom: auto !important; float: none !important; left: auto !important; line-height: 1.1em !important; outline: 0px !important; overflow: visible !important; position: static !important; right: auto !important; top: auto !important; box-sizing: content-box !important; min-height: auto !important;\" width=\"592\"><div class=\"line number1 index0 alt2\" style=\"border: 0px !important; margin: 0px !important; padding: 0px 1em !important; font-size: 12px !important; border-radius: 0px !important; background-image: none !important; background-position: initial !important; background-size: initial !important; background-repeat: initial !important; background-attachment: initial !important; background-origin: initial !important; background-clip: initial !important; bottom: auto !important; float: none !important; height: auto !important; left: auto !important; line-height: 1.1em !important; outline: 0px !important; overflow: visible !important; position: static !important; right: auto !important; top: auto !important; vertical-align: baseline !important; width: auto !important; box-sizing: content-box !important; min-height: auto !important; white-space: pre !important;\"><code class=\"text plain\" style=\"border: 0px !important; margin: 0px !important; padding: 0px !important; font-size: 12px !important; font-family: Consolas, &quot;Bitstream Vera Sans Mono&quot;, &quot;Courier New&quot;, Courier, monospace !important; border-radius: 0px !important; background: none !important; bottom: auto !important; float: none !important; height: auto !important; left: auto !important; line-height: 1.1em !important; outline: 0px !important; overflow: visible !important; position: static !important; right: auto !important; top: auto !important; vertical-align: baseline !important; width: auto !important; box-sizing: content-box !important; min-height: auto !important;\">0:&nbsp;&nbsp;&nbsp; iconst_0&nbsp;&nbsp;&nbsp; // Push 0 to top of the operand stack</code></div><div class=\"line number2 index1 alt1\" style=\"border: 0px !important; margin: 0px !important; padding: 0px 1em !important; font-size: 12px !important; border-radius: 0px !important; background-image: none !important; background-position: initial !important; background-size: initial !important; background-repeat: initial !important; background-attachment: initial !important; background-origin: initial !important; background-clip: initial !important; bottom: auto !important; float: none !important; height: auto !important; left: auto !important; line-height: 1.1em !important; outline: 0px !important; overflow: visible !important; position: static !important; right: auto !important; top: auto !important; vertical-align: baseline !important; width: auto !important; box-sizing: content-box !important; min-height: auto !important; white-space: pre !important;\"><code class=\"text plain\" style=\"border: 0px !important; margin: 0px !important; padding: 0px !important; font-size: 12px !important; font-family: Consolas, &quot;Bitstream Vera Sans Mono&quot;, &quot;Courier New&quot;, Courier, monospace !important; border-radius: 0px !important; background: none !important; bottom: auto !important; float: none !important; height: auto !important; left: auto !important; line-height: 1.1em !important; outline: 0px !important; overflow: visible !important; position: static !important; right: auto !important; top: auto !important; vertical-align: baseline !important; width: auto !important; box-sizing: content-box !important; min-height: auto !important;\">1:&nbsp;&nbsp;&nbsp; istore_1&nbsp;&nbsp;&nbsp; // Pop value from top of operand stack and store as local variable 1</code></div></td></tr></tbody></table><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px;\"><span style=\"border: 0px; margin: 0px; padding: 0px;\">更多关于局部变量数组、操作数栈和运行时常量池之间交互的详细信息，可以在类文件结构部分找到。</span></p><h3 style=\"border: 0px; margin: -8px 0px 20px; padding: 0px; font-size: 20px; font-weight: normal; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;\">动态链接</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px;\">每个栈帧都有一个运行时常量池的引用。这个引用指向栈帧当前运行方法所在类的常量池。通过这个引用支持动态链接（dynamic linking）。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px;\">C/C++ 代码一般被编译成对象文件，然后多个对象文件被链接到一起产生可执行文件或者 dll。在链接阶段，每个对象文件的符号引用被替换成了最终执行文件的相对偏移内存地址。在 Java中，链接阶段是运行时动态完成的。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px;\">当 Java 类文件编译时，所有变量和方法的引用都被当做符号引用存储在这个类的常量池中。符号引用是一个逻辑引用，实际上并不指向物理内存地址。JVM 可以选择符号引用解析的时机，一种是当类文件加载并校验通过后，这种解析方式被称为饥饿方式。另外一种是符号引用在第一次使用的时候被解析，这种解析方式称为惰性方式。无论如何 ，JVM 必须要在第一次使用符号引用时完成解析并抛出可能发生的解析错误。绑定是将对象域、方法、类的符号引用替换为直接引用的过程。绑定只会发生一次。一旦绑定，符号引用会被完全替换。如果一个类的符号引用还没有被解析，那么就会载入这个类。每个直接引用都被存储为相对于存储结构（与运行时变量或方法的位置相关联的）偏移量。</p><h2 style=\"border: 0px; margin: -9px 0px 20px; padding: 0px; font-size: 24px; font-weight: normal; font-stretch: normal; line-height: 36px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;\">线程间共享</h2><h2 style=\"border: 0px; margin: -9px 0px 20px; padding: 0px; font-size: 24px; font-weight: normal; font-stretch: normal; line-height: 36px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;\">堆</h2><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px;\">堆被用来在运行时分配类实例、数组。不能在栈上存储数组和对象。因为栈帧被设计为创建以后无法调整大小。栈帧只存储指向堆中对象或数组的引用。与局部变量数组（每个栈帧中的）中的原始类型和引用类型不同，对象总是存储在堆上以便在方法结束时不会被移除。对象只能由垃圾回收器移除。</p><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px;\">为了支持垃圾回收机制，堆被分为了下面三个区域：</p><ul style=\"border: 0px; margin-bottom: 20px; padding: 0px; list-style-position: inside; list-style-image: initial;\" class=\" list-paddingleft-2\"><li><p>新生代</p></li><ul style=\"list-style-type: square;\" class=\" list-paddingleft-2\"><li><p>经常被分为 Eden 和 Survivor</p></li></ul><li><p>老年代</p></li><li><p>永久代</p></li></ul><h3 style=\"border: 0px; margin: -8px 0px 20px; padding: 0px; font-size: 20px; font-weight: normal; font-stretch: normal; line-height: 30px; font-family: &quot;Microsoft YaHei&quot;, &quot;Myriad Pro&quot;, Lato, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;\">内存管理</h3><p style=\"border: 0px; margin-top: 0px; margin-bottom: 20px; padding: 0px;\"><span style=\"border: 0px; margin: 0px; padding: 0px;\">对象和数组永远不会显式回收，而是由垃圾回收器自动回收。</span><span style=\"border: 0px; margin: 0px; padding: 0px;\">通常，过程是这样的：</span></p><ol style=\"border: 0px; margin-bottom: 20px; padding: 0px; list-style-position: inside; list-style-image: initial;\" class=\" list-paddingleft-2\"><li><p>新的对象和数组被创建并放入老年代。</p></li><li><p>Minor垃圾回收将发生在新生代。依旧存活的对象将从 eden 区移到 survivor 区。</p></li><li><p>Major垃圾回收一般会导致应用进程暂</p></li></ol><p><br/></p>',0,0,'2017-08-25 12:01:17','JVM',1),(9,'Java多线程实现的三种方式','Java多线程实现方式主要有三种：继承Thread类、实现Runnable接口、使用ExecutorService、Callable、Future实现有返回结果的多线程。其中前两种方式线程执行完后都没有返回值，只有最后一种是带返回值的。1、继承Thread类实现多线程继承Thread类的方法尽管被我列为一种多','<p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; font-family: Arial; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><a href=\"http://lib.csdn.net/base/java\" class=\"replace_word\" title=\"Java 知识库\" target=\"_blank\" style=\"color: rgb(223, 52, 52); text-decoration-line: none; font-weight: bold;\">Java</a>多线程实现方式主要有三种：继承Thread类、实现Runnable接口、使用ExecutorService、Callable、Future实现有返回结果的多线程。其中前两种方式线程执行完后都没有返回值，只有最后一种是带返回值的。</span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; font-family: Arial; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><br/></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; font-family: Arial; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\">1、继承Thread类实现多线程<br/>继承Thread类的方法尽管被我列为一种多线程实现方式，但Thread本质上也是实现了Runnable接口的一个实例，它代表一个线程的实例，并且，启动线程的唯一方法就是通过Thread类的start()实例方法。start()方法是一个native方法，它将启动一个新线程，并执行run()方法。这种方式实现多线程很简单，通过自己的类直接extend Thread，并复写run()方法，就可以启动新线程并执行自己定义的run()方法。例如：<br/></span></p><p><strong>[java]</strong>&nbsp;<a href=\"http://blog.csdn.net/aboy123/article/details/38307539#\" class=\"ViewSource\" title=\"view plain\" target=\"_blank\" style=\"color: rgb(160, 160, 160); text-decoration-line: none; background-image: url(&quot;images/default/ico_plain.gif&quot;); background-position: left top; background-size: initial; background-repeat: no-repeat; background-attachment: initial; background-origin: initial; background-clip: initial; background-color: inherit; border: none; padding: 1px; margin: 0px 10px 0px 0px; font-size: 9px; display: inline-block; width: 16px; height: 16px; text-indent: -2000px;\">view plain</a>&nbsp;<a href=\"http://blog.csdn.net/aboy123/article/details/38307539#\" class=\"CopyToClipboard\" title=\"copy\" target=\"_blank\" style=\"color: rgb(160, 160, 160); text-decoration-line: none; background-image: url(&quot;images/default/ico_copy.gif&quot;); background-position: left top; background-size: initial; background-repeat: no-repeat; background-attachment: initial; background-origin: initial; background-clip: initial; background-color: inherit; border: none; padding: 1px; margin: 0px 10px 0px 0px; font-size: 9px; display: inline-block; width: 16px; height: 16px; text-indent: -2000px;\">copy</a></p><ol class=\"dp-j list-paddingleft-2\" style=\"padding: 0px; border-top: none; border-right: 1px solid rgb(231, 229, 220); border-bottom: none; border-left: none; border-image: initial; list-style-position: initial; list-style-image: initial; background-color: rgb(255, 255, 255); color: rgb(92, 92, 92); margin-bottom: 1px !important; margin-left: 45px !important;\"><li><p><span style=\"margin: 0px; padding: 0px; border: none; color: black; background-color: inherit;\"><span class=\"keyword\" style=\"margin: 0px; padding: 0px; border: none; color: rgb(0, 102, 153); background-color: inherit; font-weight: bold;\">public</span><span style=\"margin: 0px; padding: 0px; border: none; background-color: inherit;\">&nbsp;</span><span class=\"keyword\" style=\"margin: 0px; padding: 0px; border: none; color: rgb(0, 102, 153); background-color: inherit; font-weight: bold;\">class</span><span style=\"margin: 0px; padding: 0px; border: none; background-color: inherit;\">&nbsp;MyThread&nbsp;</span><span class=\"keyword\" style=\"margin: 0px; padding: 0px; border: none; color: rgb(0, 102, 153); background-color: inherit; font-weight: bold;\">extends</span><span style=\"margin: 0px; padding: 0px; border: none; background-color: inherit;\">&nbsp;Thread&nbsp;{&nbsp;&nbsp;</span></span></p></li><li><p><span style=\"margin: 0px; padding: 0px; border: none; color: black; background-color: inherit;\">　　<span class=\"keyword\" style=\"margin: 0px; padding: 0px; border: none; color: rgb(0, 102, 153); background-color: inherit; font-weight: bold;\">public</span><span style=\"margin: 0px; padding: 0px; border: none; background-color: inherit;\">&nbsp;</span><span class=\"keyword\" style=\"margin: 0px; padding: 0px; border: none; color: rgb(0, 102, 153); background-color: inherit; font-weight: bold;\">void</span><span style=\"margin: 0px; padding: 0px; border: none; background-color: inherit;\">&nbsp;run()&nbsp;{&nbsp;&nbsp;</span></span></p></li><li><p><span style=\"margin: 0px; padding: 0px; border: none; color: black; background-color: inherit;\">　　&nbsp;System.out.println(<span class=\"string\" style=\"margin: 0px; padding: 0px; border: none; color: blue; background-color: inherit;\">&quot;MyThread.run()&quot;</span><span style=\"margin: 0px; padding: 0px; border: none; background-color: inherit;\">);&nbsp;&nbsp;</span></span></p></li><li><p><span style=\"margin: 0px; padding: 0px; border: none; color: black; background-color: inherit;\">　　}&nbsp;&nbsp;</span></p></li><li><p><span style=\"margin: 0px; padding: 0px; border: none; color: black; background-color: inherit;\">}&nbsp;&nbsp;</span></p></li></ol><p><span style=\"font-family: Arial; font-size: 14px; background-color: rgb(255, 255, 255);\">在合适的地方启动线程如下：</span><br/></p><p><strong>[java]</strong>&nbsp;<a href=\"http://blog.csdn.net/aboy123/article/details/38307539#\" class=\"ViewSource\" title=\"view plain\" target=\"_blank\" style=\"color: rgb(160, 160, 160); text-decoration-line: none; background-image: url(&quot;images/default/ico_plain.gif&quot;); background-position: left top; background-size: initial; background-repeat: no-repeat; background-attachment: initial; background-origin: initial; background-clip: initial; background-color: inherit; border: none; padding: 1px; margin: 0px 10px 0px 0px; font-size: 9px; display: inline-block; width: 16px; height: 16px; text-indent: -2000px;\">view plain</a>&nbsp;<a href=\"http://blog.csdn.net/aboy123/article/details/38307539#\" class=\"CopyToClipboard\" title=\"copy\" target=\"_blank\" style=\"color: rgb(160, 160, 160); text-decoration-line: none; background-image: url(&quot;images/default/ico_copy.gif&quot;); background-position: left top; background-size: initial; background-repeat: no-repeat; background-attachment: initial; background-origin: initial; background-clip: initial; background-color: inherit; border: none; padding: 1px; margin: 0px 10px 0px 0px; font-size: 9px; display: inline-block; width: 16px; height: 16px; text-indent: -2000px;\">copy</a></p><ol class=\"dp-j list-paddingleft-2\" style=\"padding: 0px; border-top: none; border-right: 1px solid rgb(231, 229, 220); border-bottom: none; border-left: none; border-image: initial; list-style-position: initial; list-style-image: initial; background-color: rgb(255, 255, 255); color: rgb(92, 92, 92); margin-bottom: 1px !important; margin-left: 45px !important;\"><li><p><span style=\"margin: 0px; padding: 0px; border: none; color: black; background-color: inherit;\"><span style=\"margin: 0px; padding: 0px; border: none; background-color: inherit;\">MyThread&nbsp;myThread1&nbsp;=&nbsp;</span><span class=\"keyword\" style=\"margin: 0px; padding: 0px; border: none; color: rgb(0, 102, 153); background-color: inherit; font-weight: bold;\">new</span><span style=\"margin: 0px; padding: 0px; border: none; background-color: inherit;\">&nbsp;MyThread();&nbsp;&nbsp;</span></span></p></li><li><p><span style=\"margin: 0px; padding: 0px; border: none; color: black; background-color: inherit;\">MyThread&nbsp;myThread2&nbsp;=&nbsp;<span class=\"keyword\" style=\"margin: 0px; padding: 0px; border: none; color: rgb(0, 102, 153); background-color: inherit; font-weight: bold;\">new</span><span style=\"margin: 0px; padding: 0px; border: none; background-color: inherit;\">&nbsp;MyThread();&nbsp;&nbsp;</span></span></p></li><li><p><span style=\"margin: 0px; padding: 0px; border: none; color: black; background-color: inherit;\">myThread1.start();&nbsp;&nbsp;</span></p></li><li><p><span style=\"margin: 0px; padding: 0px; border: none; color: black; background-color: inherit;\">myThread2.start();&nbsp;&nbsp;</span></p></li></ol><p><br/><span style=\"font-family: Arial; font-size: 14px; background-color: rgb(255, 255, 255);\">2、实现Runnable接口方式实现多线程</span><br/><span style=\"font-family: Arial; font-size: 14px; background-color: rgb(255, 255, 255);\">如果自己的类已经extends另一个类，就无法直接extends Thread，此时，必须实现一个Runnable接口，如下：</span><br/></p><p><strong>[java]</strong>&nbsp;<a href=\"http://blog.csdn.net/aboy123/article/details/38307539#\" class=\"ViewSource\" title=\"view plain\" target=\"_blank\" style=\"color: rgb(160, 160, 160); text-decoration-line: none; background-image: url(&quot;images/default/ico_plain.gif&quot;); background-position: left top; background-size: initial; background-repeat: no-repeat; background-attachment: initial; background-origin: initial; background-clip: initial; background-color: inherit; border: none; padding: 1px; margin: 0px 10px 0px 0px; font-size: 9px; display: inline-block; width: 16px; height: 16px; text-indent: -2000px;\">view plain</a>&nbsp;<a href=\"http://blog.csdn.net/aboy123/article/details/38307539#\" class=\"CopyToClipboard\" title=\"copy\" target=\"_blank\" style=\"color: rgb(160, 160, 160); text-decoration-line: none; background-image: url(&quot;images/default/ico_copy.gif&quot;); background-position: left top; background-size: initial; background-repeat: no-repeat; background-attachment: initial; background-origin: initial; background-clip: initial; background-color: inherit; border: none; padding: 1px; margin: 0px 10px 0px 0px; font-size: 9px; display: inline-block; width: 16px; height: 16px; text-indent: -2000px;\">copy</a></p><ol class=\"dp-j list-paddingleft-2\" style=\"padding: 0px; border-top: none; border-right: 1px solid rgb(231, 229, 220); border-bottom: none; border-left: none; border-image: initial; list-style-position: initial; list-style-image: initial; background-color: rgb(255, 255, 255); color: rgb(92, 92, 92); margin-bottom: 1px !important; margin-left: 45px !important;\"><li><p><span style=\"margin: 0px; padding: 0px; border: none; color: black; background-color: inherit;\"><span class=\"keyword\" style=\"margin: 0px; padding: 0px; border: none; color: rgb(0, 102, 153); background-color: inherit; font-weight: bold;\">public</span><span style=\"margin: 0px; padding: 0px; border: none; background-color: inherit;\">&nbsp;</span><span class=\"keyword\" style=\"margin: 0px; padding: 0px; border: none; color: rgb(0, 102, 153); background-color: inherit; font-weight: bold;\">class</span><span style=\"margin: 0px; padding: 0px; border: none; background-color: inherit;\">&nbsp;MyThread&nbsp;</span><span class=\"keyword\" style=\"margin: 0px; padding: 0px; border: none; color: rgb(0, 102, 153); background-color: inherit; font-weight: bold;\">extends</span><span style=\"margin: 0px; padding: 0px; border: none; background-color: inherit;\">&nbsp;OtherClass&nbsp;</span><span class=\"keyword\" style=\"margin: 0px; padding: 0px; border: none; color: rgb(0, 102, 153); background-color: inherit; font-weight: bold;\">implements</span><span style=\"margin: 0px; padding: 0px; border: none; background-color: inherit;\">&nbsp;Runnable&nbsp;{&nbsp;&nbsp;</span></span></p></li><li><p><span style=\"margin: 0px; padding: 0px; border: none; color: black; background-color: inherit;\">　　<span class=\"keyword\" style=\"margin: 0px; padding: 0px; border: none; color: rgb(0, 102, 153); background-color: inherit; font-weight: bold;\">public</span><span style=\"margin: 0px; padding: 0px; border: none; background-color: inherit;\">&nbsp;</span><span class=\"keyword\" style=\"margin: 0px; padding: 0px; border: none; color: rgb(0, 102, 153); background-color: inherit; font-weight: bold;\">void</span><span style=\"margin: 0px; padding: 0px; border: none; background-color: inherit;\">&nbsp;run()&nbsp;{&nbsp;&nbsp;</span></span></p></li><li><p><span style=\"margin: 0px; padding: 0px; border: none; color: black; background-color: inherit;\">　　&nbsp;System.out.println(<span class=\"string\" style=\"margin: 0px; padding: 0px; border: none; color: blue; background-color: inherit;\">&quot;MyThread.run()&quot;</span><span style=\"margin: 0px; padding: 0px; border: none; background-color: inherit;\">);&nbsp;&nbsp;</span></span></p></li><li><p><span style=\"margin: 0px; padding: 0px; border: none; color: black; background-color: inherit;\">　　}&nbsp;&nbsp;</span></p></li><li><p><span style=\"margin: 0px; padding: 0px; border: none; color: black; background-color: inherit;\">}&nbsp;&nbsp;</span></p></li></ol><p><span style=\"font-family: Arial; font-size: 14px; background-color: rgb(255, 255, 255);\">为了启动MyThread，需要首先实例化一个Thread，并传入自己的MyThread实例：</span><br/></p><p><strong>[java]</strong>&nbsp;<a href=\"http://blog.csdn.net/aboy123/article/details/38307539#\" class=\"ViewSource\" title=\"view plain\" target=\"_blank\" style=\"color: rgb(160, 160, 160); text-decoration-line: none; background-image: url(&quot;images/default/ico_plain.gif&quot;); background-position: left top; background-size: initial; background-repeat: no-repeat; background-attachment: initial; background-origin: initial; background-clip: initial; background-color: inherit; border: none; padding: 1px; margin: 0px 10px 0px 0px; font-size: 9px; display: inline-block; width: 16px; height: 16px; text-indent: -2000px;\">view plain</a>&nbsp;<a href=\"http://blog.csdn.net/aboy123/article/details/38307539#\" class=\"CopyToClipboard\" title=\"copy\" target=\"_blank\" style=\"color: rgb(160, 160, 160); text-decoration-line: none; background-image: url(&quot;images/default/ico_copy.gif&quot;); background-position: left top; background-size: initial; background-repeat: no-repeat; background-attachment: initial; background-origin: initial; background-clip: initial; background-color: inherit; border: none; padding: 1px; margin: 0px 10px 0px 0px; font-size: 9px; display: inline-block; width: 16px; height: 16px; text-indent: -2000px;\">copy</a></p><ol class=\"dp-j list-paddingleft-2\" style=\"padding: 0px; border-top: none; border-right: 1px solid rgb(231, 229, 220); border-bottom: none; border-left: none; border-image: initial; list-style-position: initial; list-style-image: initial; background-color: rgb(255, 255, 255); color: rgb(92, 92, 92); margin-bottom: 1px !important; margin-left: 45px !important;\"><li><p><span style=\"margin: 0px; padding: 0px; border: none; color: black; background-color: inherit;\"><span style=\"margin: 0px; padding: 0px; border: none; background-color: inherit;\">MyThread&nbsp;myThread&nbsp;=&nbsp;</span><span class=\"keyword\" style=\"margin: 0px; padding: 0px; border: none; color: rgb(0, 102, 153); background-color: inherit; font-weight: bold;\">new</span><span style=\"margin: 0px; padding: 0px; border: none; background-color: inherit;\">&nbsp;MyThread();&nbsp;&nbsp;</span></span></p></li><li><p><span style=\"margin: 0px; padding: 0px; border: none; color: black; background-color: inherit;\">Thread&nbsp;thread&nbsp;=&nbsp;<span class=\"keyword\" style=\"margin: 0px; padding: 0px; border: none; color: rgb(0, 102, 153); background-color: inherit; font-weight: bold;\">new</span><span style=\"margin: 0px; padding: 0px; border: none; background-color: inherit;\">&nbsp;Thread(myThread);&nbsp;&nbsp;</span></span></p></li><li><p><span style=\"margin: 0px; padding: 0px; border: none; color: black; background-color: inherit;\">thread.start();&nbsp;&nbsp;</span></p></li></ol><p><span style=\"font-family: Arial; font-size: 14px; background-color: rgb(255, 255, 255);\">事实上，当传入一个Runnable target参数给Thread后，Thread的run()方法就会调用target.run()，参考JDK源代码：</span><br/></p><p><strong>[java]</strong>&nbsp;<a href=\"http://blog.csdn.net/aboy123/article/details/38307539#\" class=\"ViewSource\" title=\"view plain\" target=\"_blank\" style=\"color: rgb(160, 160, 160); text-decoration-line: none; background-image: url(&quot;images/default/ico_plain.gif&quot;); background-position: left top; background-size: initial; background-repeat: no-repeat; background-attachment: initial; background-origin: initial; background-clip: initial; background-color: inherit; border: none; padding: 1px; margin: 0px 10px 0px 0px; font-size: 9px; display: inline-block; width: 16px; height: 16px; text-indent: -2000px;\">view plain</a>&nbsp;<a href=\"http://blog.csdn.net/aboy123/article/details/38307539#\" class=\"CopyToClipboard\" title=\"copy\" target=\"_blank\" style=\"color: rgb(160, 160, 160); text-decoration-line: none; background-image: url(&quot;images/default/ico_copy.gif&quot;); background-position: left top; background-size: initial; background-repeat: no-repeat; background-attachment: initial; background-origin: initial; background-clip: initial; background-color: inherit; border: none; padding: 1px; margin: 0px 10px 0px 0px; font-size: 9px; display: inline-block; width: 16px; height: 16px; text-indent: -2000px;\">copy</a></p><ol class=\"dp-j list-paddingleft-2\" style=\"padding: 0px; border-top: none; border-right: 1px solid rgb(231, 229, 220); border-bottom: none; border-left: none; border-image: initial; list-style-position: initial; list-style-image: initial; background-color: rgb(255, 255, 255); color: rgb(92, 92, 92); margin-bottom: 1px !important; margin-left: 45px !important;\"><li><p><span style=\"margin: 0px; padding: 0px; border: none; color: black; background-color: inherit;\"><span class=\"keyword\" style=\"margin: 0px; padding: 0px; border: none; color: rgb(0, 102, 153); background-color: inherit; font-weight: bold;\">public</span><span style=\"margin: 0px; padding: 0px; border: none; background-color: inherit;\">&nbsp;</span><span class=\"keyword\" style=\"margin: 0px; padding: 0px; border: none; color: rgb(0, 102, 153); background-color: inherit; font-weight: bold;\">void</span><span style=\"margin: 0px; padding: 0px; border: none; background-color: inherit;\">&nbsp;run()&nbsp;{&nbsp;&nbsp;</span></span></p></li><li><p><span style=\"margin: 0px; padding: 0px; border: none; color: black; background-color: inherit;\">　　<span class=\"keyword\" style=\"margin: 0px; padding: 0px; border: none; color: rgb(0, 102, 153); background-color: inherit; font-weight: bold;\">if</span><span style=\"margin: 0px; padding: 0px; border: none; background-color: inherit;\">&nbsp;(target&nbsp;!=&nbsp;</span><span class=\"keyword\" style=\"margin: 0px; padding: 0px; border: none; color: rgb(0, 102, 153); background-color: inherit; font-weight: bold;\">null</span><span style=\"margin: 0px; padding: 0px; border: none; background-color: inherit;\">)&nbsp;{&nbsp;&nbsp;</span></span></p></li><li><p><span style=\"margin: 0px; padding: 0px; border: none; color: black; background-color: inherit;\">　　&nbsp;target.run();&nbsp;&nbsp;</span></p></li><li><p><span style=\"margin: 0px; padding: 0px; border: none; color: black; background-color: inherit;\">　　}&nbsp;&nbsp;</span></p></li><li><p><span style=\"margin: 0px; padding: 0px; border: none; color: black; background-color: inherit;\">}&nbsp;&nbsp;</span></p></li></ol><p><br/><span style=\"font-family: Arial; font-size: 14px; background-color: rgb(255, 255, 255);\">3、使用ExecutorService、Callable、Future实现有返回结果的多线程</span><br/><span style=\"font-family: Arial; font-size: 14px; background-color: rgb(255, 255, 255);\">ExecutorService、Callable、Future这个对象实际上都是属于Executor框架中的功能类。想要详细了解Executor框架的可以访问http://www.javaeye.com/topic/366591 ，这里面对该框架做了很详细的解释。返回结果的线程是在JDK1.5中引入的新特征，确实很实用，有了这种特征我就不需要再为了得到返回值而大费周折了，而且即便实现了也可能漏洞百出。</span><br/><span style=\"font-family: Arial; font-size: 14px; background-color: rgb(255, 255, 255);\">可返回值的任务必须实现Callable接口，类似的，无返回值的任务必须Runnable接口。执行Callable任务后，可以获取一个Future的对象，在该对象上调用get就可以获取到Callable任务返回的Object了，再结合线程池接口ExecutorService就可以实现传说中有返回结果的多线程了。下面提供了一个完整的有返回结果的多线程测试例子，在JDK1.5下验证过没问题可以直接使用。代码如下：</span><br/></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; font-family: Arial; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\"><br/></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; font-family: Arial; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\"><br/></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; font-family: Arial; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"></span></p><p><strong>[java]</strong>&nbsp;<a href=\"http://blog.csdn.net/aboy123/article/details/38307539#\" class=\"ViewSource\" title=\"view plain\" target=\"_blank\" style=\"color: rgb(160, 160, 160); text-decoration-line: none; background-image: url(&quot;images/default/ico_plain.gif&quot;); background-position: left top; background-size: initial; background-repeat: no-repeat; background-attachment: initial; background-origin: initial; background-clip: initial; background-color: inherit; border: none; padding: 1px; margin: 0px 10px 0px 0px; font-size: 9px; display: inline-block; width: 16px; height: 16px; text-indent: -2000px;\">view plain</a>&nbsp;<a href=\"http://blog.csdn.net/aboy123/article/details/38307539#\" class=\"CopyToClipboard\" title=\"copy\" target=\"_blank\" style=\"color: rgb(160, 160, 160); text-decoration-line: none; background-image: url(&quot;images/default/ico_copy.gif&quot;); background-position: left top; background-size: initial; background-repeat: no-repeat; background-attachment: initial; background-origin: initial; background-clip: initial; background-color: inherit; border: none; padding: 1px; margin: 0px 10px 0px 0px; font-size: 9px; display: inline-block; width: 16px; height: 16px; text-indent: -2000px;\">copy</a></p><ol class=\"dp-j list-paddingleft-2\" style=\"padding: 0px; border-top: none; border-right: 1px solid rgb(231, 229, 220); border-bottom: none; border-left: none; border-image: initial; list-style-position: initial; list-style-image: initial; background-color: rgb(255, 255, 255); color: rgb(92, 92, 92); margin-bottom: 1px !important; margin-left: 45px !important;\"><li><p><span style=\"margin: 0px; padding: 0px; border: none; color: black; background-color: inherit;\"><span class=\"keyword\" style=\"margin: 0px; padding: 0px; border: none; color: rgb(0, 102, 153); background-color: inherit; font-weight: bold;\">import</span><span style=\"margin: 0px; padding: 0px; border: none; background-color: inherit;\">&nbsp;java.util.concurrent.*;&nbsp;&nbsp;</span></span></p></li><li><p><span style=\"margin: 0px; padding: 0px; border: none; color: black; background-color: inherit;\"><span class=\"keyword\" style=\"margin: 0px; padding: 0px; border: none; color: rgb(0, 102, 153); background-color: inherit; font-weight: bold;\">import</span><span style=\"margin: 0px; padding: 0px; border: none; background-color: inherit;\">&nbsp;java.util.Date;&nbsp;&nbsp;</span></span></p></li><li><p><span style=\"margin: 0px; padding: 0px; border: none; color: black; background-color: inherit;\"><span class=\"keyword\" style=\"margin: 0px; padding: 0px; border: none; color: rgb(0, 102, 153); background-color: inherit; font-weight: bold;\">import</span><span style=\"margin: 0px; padding: 0px; border: none; background-color: inherit;\">&nbsp;java.util.List;&nbsp;&nbsp;</span></span></p></li><li><p><span style=\"margin: 0px; padding: 0px; border: none; color: black; background-color: inherit;\"><span class=\"keyword\" style=\"margin: 0px; padding: 0px; border: none; color: rgb(0, 102, 153); background-color: inherit; font-weight: bold;\">import</span><span style=\"margin: 0px; padding: 0px; border: none; background-color: inherit;\">&nbsp;java.util.ArrayList;&nbsp;&nbsp;</span></span></p></li><li><p><span style=\"margin: 0px; padding: 0px; border: none; color: black; background-color: inherit;\">&nbsp;&nbsp;</span></p></li><li><p><span style=\"margin: 0px; padding: 0px; border: none; color: black; background-color: inherit;\"><span class=\"comment\" style=\"margin: 0px; padding: 0px; border: none; color: rgb(0, 130, 0); background-color: inherit;\">/**</span>&nbsp;</span></p></li><li><p><span style=\"margin: 0px; padding: 0px; border: none; color: black; background-color: inherit;\"><span class=\"comment\" style=\"margin: 0px; padding: 0px; border: none; color: rgb(0, 130, 0); background-color: inherit;\">*&nbsp;有返回值的线程</span>&nbsp;</span></p></li><li><p><span style=\"margin: 0px; padding: 0px; border: none; color: black; background-color: inherit;\"><span class=\"comment\" style=\"margin: 0px; padding: 0px; border: none; color: rgb(0, 130, 0); background-color: inherit;\">*/</span><span style=\"margin: 0px; padding: 0px; border: none; background-color: inherit;\">&nbsp;&nbsp;</span></span></p></li><li><p><span style=\"margin: 0px; padding: 0px; border: none; color: black; background-color: inherit;\"><span class=\"annotation\" style=\"margin: 0px; padding: 0px; border: none; color: rgb(100, 100, 100); background-color: inherit;\">@SuppressWarnings</span><span style=\"margin: 0px; padding: 0px; border: none; background-color: inherit;\">(</span><span class=\"string\" style=\"margin: 0px; padding: 0px; border: none; color: blue; background-color: inherit;\">&quot;unchecked&quot;</span><span style=\"margin: 0px; padding: 0px; border: none; background-color: inherit;\">)&nbsp;&nbsp;</span></span></p></li><li><p><span style=\"margin: 0px; padding: 0px; border: none; color: black; background-color: inherit;\"><span class=\"keyword\" style=\"margin: 0px; padding: 0px; border: none; color: rgb(0, 102, 153); background-color: inherit; font-weight: bold;\">public</span><span style=\"margin: 0px; padding: 0px; border: none; background-color: inherit;\">&nbsp;</span><span class=\"keyword\" style=\"margin: 0px; padding: 0px; border: none; color: rgb(0, 102, 153); background-color: inherit; font-weight: bold;\">class</span><span style=\"margin: 0px; padding: 0px; border: none; background-color: inherit;\">&nbsp;Test&nbsp;{&nbsp;&nbsp;</span></span></p></li><li><p><span style=\"margin: 0px; padding: 0px; border: none; color: black; background-color: inherit;\"><span class=\"keyword\" style=\"margin: 0px; padding: 0px; border: none; color: rgb(0, 102, 153); background-color: inherit; font-weight: bold;\">public</span><span style=\"margin: 0px; padding: 0px; border: none; background-color: inherit;\">&nbsp;</span><span class=\"keyword\" style=\"margin: 0px; padding: 0px; border: none; color: rgb(0, 102, 153); background-color: inherit; font-weight: bold;\">static</span><span style=\"margin: 0px; padding: 0px; border: none; background-color: inherit;\">&nbsp;</span><span class=\"keyword\" style=\"margin: 0px; padding: 0px; border: none; color: rgb(0, 102, 153); background-color: inherit; font-weight: bold;\">void</span><span style=\"margin: 0px; padding: 0px; border: none; background-color: inherit;\">&nbsp;main(String[]&nbsp;args)&nbsp;</span><span class=\"keyword\" style=\"margin: 0px; padding: 0px; border: none; color: rgb(0, 102, 153); background-color: inherit; font-weight: bold;\">throws</span><span style=\"margin: 0px; padding: 0px; border: none; background-color: inherit;\">&nbsp;ExecutionException,&nbsp;&nbsp;</span></span></p></li><li><p><span style=\"margin: 0px; padding: 0px; border: none; color: black; background-color: inherit;\">&nbsp;&nbsp;&nbsp;&nbsp;InterruptedException&nbsp;{&nbsp;&nbsp;</span></p></li><li><p><span style=\"margin: 0px; padding: 0px; border: none; color: black; background-color: inherit;\">&nbsp;&nbsp;&nbsp;System.out.println(<span class=\"string\" style=\"margin: 0px; padding: 0px; border: none; color: blue; background-color: inherit;\">&quot;----程序开始运行----&quot;</span><span style=\"margin: 0px; padding: 0px; border: none; background-color: inherit;\">);&nbsp;&nbsp;</span></span></p></li><li><p><span style=\"margin: 0px; padding: 0px; border: none; color: black; background-color: inherit;\">&nbsp;&nbsp;&nbsp;Date&nbsp;date1&nbsp;=&nbsp;<span class=\"keyword\" style=\"margin: 0px; padding: 0px; border: none; color: rgb(0, 102, 153); background-color: inherit; font-weight: bold;\">new</span><span style=\"margin: 0px; padding: 0px; border: none; background-color: inherit;\">&nbsp;Date();&nbsp;&nbsp;</span></span></p></li><li><p><span style=\"margin: 0px; padding: 0px; border: none; color: black; background-color: inherit;\">&nbsp;&nbsp;</span></p></li><li><p><span style=\"margin: 0px; padding: 0px; border: none; color: black; background-color: inherit;\">&nbsp;&nbsp;&nbsp;<span class=\"keyword\" style=\"margin: 0px; padding: 0px; border: none; color: rgb(0, 102, 153); background-color: inherit; font-weight: bold;\">int</span><span style=\"margin: 0px; padding: 0px; border: none; background-color: inherit;\">&nbsp;taskSize&nbsp;=&nbsp;</span><span class=\"number\" style=\"margin: 0px; padding: 0px; border: none; color: rgb(192, 0, 0); background-color: inherit;\">5</span><span style=\"margin: 0px; padding: 0px; border: none; background-color: inherit;\">;&nbsp;&nbsp;</span></span></p></li><li><p><span style=\"margin: 0px; padding: 0px; border: none; color: black; background-color: inherit;\">&nbsp;&nbsp;&nbsp;<span class=\"comment\" style=\"margin: 0px; padding: 0px; border: none; color: rgb(0, 130, 0); background-color: inherit;\">//&nbsp;创建一个线程池</span><span style=\"margin: 0px; padding: 0px; border: none; background-color: inherit;\">&nbsp;&nbsp;</span></span></p></li><li><p><span style=\"margin: 0px; padding: 0px; border: none; color: black; background-color: inherit;\">&nbsp;&nbsp;&nbsp;ExecutorService&nbsp;pool&nbsp;=&nbsp;Executors.newFixedThreadPool(taskSize);&nbsp;&nbsp;</span></p></li><li><p><span style=\"margin: 0px; padding: 0px; border: none; color: black; background-color: inherit;\">&nbsp;&nbsp;&nbsp;<span class=\"comment\" style=\"margin: 0px; padding: 0px; border: none; color: rgb(0, 130, 0); background-color: inherit;\">//&nbsp;创建多个有返回值的任务</span><span style=\"margin: 0px; padding: 0px; border: none; background-color: inherit;\">&nbsp;&nbsp;</span></span></p></li><li><p><span style=\"margin: 0px; padding: 0px; border: none; color: black; background-color: inherit;\">&nbsp;&nbsp;&nbsp;List&lt;Future&gt;&nbsp;list&nbsp;=&nbsp;<span class=\"keyword\" style=\"margin: 0px; padding: 0px; border: none; color: rgb(0, 102, 153); background-color: inherit; font-weight: bold;\">new</span><span style=\"margin: 0px; padding: 0px; border: none; background-color: inherit;\">&nbsp;ArrayList&lt;Future&gt;();&nbsp;&nbsp;</span></span></p></li><li><p><span style=\"margin: 0px; padding: 0px; border: none; color: black; background-color: inherit;\">&nbsp;&nbsp;&nbsp;<span class=\"keyword\" style=\"margin: 0px; padding: 0px; border: none; color: rgb(0, 102, 153); background-color: inherit; font-weight: bold;\">for</span><span style=\"margin: 0px; padding: 0px; border: none; background-color: inherit;\">&nbsp;(</span><span class=\"keyword\" style=\"margin: 0px; padding: 0px; border: none; color: rgb(0, 102, 153); background-color: inherit; font-weight: bold;\">int</span><span style=\"margin: 0px; padding: 0px; border: none; background-color: inherit;\">&nbsp;i&nbsp;=&nbsp;</span><span class=\"number\" style=\"margin: 0px; padding: 0px; border: none; color: rgb(192, 0, 0); background-color: inherit;\">0</span><span style=\"margin: 0px; padding: 0px; border: none; background-color: inherit;\">;&nbsp;i&nbsp;&lt;&nbsp;taskSize;&nbsp;i++)&nbsp;{&nbsp;&nbsp;</span></span></p></li><li><p><span style=\"margin: 0px; padding: 0px; border: none; color: black; background-color: inherit;\">&nbsp;&nbsp;&nbsp;&nbsp;Callable&nbsp;c&nbsp;=&nbsp;<span class=\"keyword\" style=\"margin: 0px; padding: 0px; border: none; color: rgb(0, 102, 153); background-color: inherit; font-weight: bold;\">new</span><span style=\"margin: 0px; padding: 0px; border: none; background-color: inherit;\">&nbsp;MyCallable(i&nbsp;+&nbsp;</span><span class=\"string\" style=\"margin: 0px; padding: 0px; border: none; color: blue; background-color: inherit;\">&quot;&nbsp;&quot;</span><span style=\"margin: 0px; padding: 0px; border: none; background-color: inherit;\">);&nbsp;&nbsp;</span></span></p></li><li><p><span style=\"margin: 0px; padding: 0px; border: none; color: black; background-color: inherit;\">&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"comment\" style=\"margin: 0px; padding: 0px; border: none; color: rgb(0, 130, 0); background-color: inherit;\">//&nbsp;执行任务并获取Future对象</span><span style=\"margin: 0px; padding: 0px; border: none; background-color: inherit;\">&nbsp;&nbsp;</span></span></p></li><li><p><span style=\"margin: 0px; padding: 0px; border: none; color: black; background-color: inherit;\">&nbsp;&nbsp;&nbsp;&nbsp;Future&nbsp;f&nbsp;=&nbsp;pool.submit(c);&nbsp;&nbsp;</span></p></li><li><p><span style=\"margin: 0px; padding: 0px; border: none; color: black; background-color: inherit;\">&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"comment\" style=\"margin: 0px; padding: 0px; border: none; color: rgb(0, 130, 0); background-color: inherit;\">//&nbsp;System.out.println(&quot;&gt;&gt;&gt;&quot;&nbsp;+&nbsp;f.get().toString());</span><span style=\"margin: 0px; padding: 0px; border: none; background-color: inherit;\">&nbsp;&nbsp;</span></span></p></li><li><p><span style=\"margin: 0px; padding: 0px; border: none; color: black; background-color: inherit;\">&nbsp;&nbsp;&nbsp;&nbsp;list.add(f);&nbsp;&nbsp;</span></p></li><li><p><span style=\"margin: 0px; padding: 0px; border: none; color: black; background-color: inherit;\">&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</span></p></li><li><p><span style=\"margin: 0px; padding: 0px; border: none; color: black; background-color: inherit;\">&nbsp;&nbsp;&nbsp;<span class=\"comment\" style=\"margin: 0px; padding: 0px; border: none; color: rgb(0, 130, 0); background-color: inherit;\">//&nbsp;关闭线程池</span><span style=\"margin: 0px; padding: 0px; border: none; background-color: inherit;\">&nbsp;&nbsp;</span></span></p></li><li><p><span style=\"margin: 0px; padding: 0px; border: none; color: black; background-color: inherit;\">&nbsp;&nbsp;&nbsp;pool.shutdown();&nbsp;&nbsp;</span></p></li><li><p><span style=\"margin: 0px; padding: 0px; border: none; color: black; background-color: inherit;\">&nbsp;&nbsp;</span></p></li><li><p><span style=\"margin: 0px; padding: 0px; border: none; color: black; background-color: inherit;\">&nbsp;&nbsp;&nbsp;<span class=\"comment\" style=\"margin: 0px; padding: 0px; border: none; color: rgb(0, 130, 0); background-color: inherit;\">//&nbsp;获取所有并发任务的运行结果</span><span style=\"margin: 0px; padding: 0px; border: none; background-color: inherit;\">&nbsp;&nbsp;</span></span></p></li><li><p><span style=\"margin: 0px; padding: 0px; border: none; color: black; background-color: inherit;\">&nbsp;&nbsp;&nbsp;<span class=\"keyword\" style=\"margin: 0px; padding: 0px; border: none; color: rgb(0, 102, 153); background-color: inherit; font-weight: bold;\">for</span><span style=\"margin: 0px; padding: 0px; border: none; background-color: inherit;\">&nbsp;(Future&nbsp;f&nbsp;:&nbsp;list)&nbsp;{&nbsp;&nbsp;</span></span></p></li><li><p><span style=\"margin: 0px; padding: 0px; border: none; color: black; background-color: inherit;\">&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"comment\" style=\"margin: 0px; padding: 0px; border: none; color: rgb(0, 130, 0); background-color: inherit;\">//&nbsp;从Future对象上获取任务的返回值，并输出到控制台</span><span style=\"margin: 0px; padding: 0px; border: none; background-color: inherit;\">&nbsp;&nbsp;</span></span></p></li><li><p><span style=\"margin: 0px; padding: 0px; border: none; color: black; background-color: inherit;\">&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(<span class=\"string\" style=\"margin: 0px; padding: 0px; border: none; color: blue; background-color: inherit;\">&quot;&gt;&gt;&gt;&quot;</span><span style=\"margin: 0px; padding: 0px; border: none; background-color: inherit;\">&nbsp;+&nbsp;f.get().toString());&nbsp;&nbsp;</span></span></p></li><li><p><span style=\"margin: 0px; padding: 0px; border: none; color: black; background-color: inherit;\">&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</span></p></li><li><p><span style=\"margin: 0px; padding: 0px; border: none; color: black; background-color: inherit;\">&nbsp;&nbsp;</span></p></li><li><p><span style=\"margin: 0px; padding: 0px; border: none; color: black; background-color: inherit;\">&nbsp;&nbsp;&nbsp;Date&nbsp;date2&nbsp;=&nbsp;<span class=\"keyword\" style=\"margin: 0px; padding: 0px; border: none; color: rgb(0, 102, 153); background-color: inherit; font-weight: bold;\">new</span><span style=\"margin: 0px; padding: 0px; border: none; background-color: inherit;\">&nbsp;Date();&nbsp;&nbsp;</span></span></p></li><li><p><span style=\"margin: 0px; padding: 0px; border: none; color: black; background-color: inherit;\">&nbsp;&nbsp;&nbsp;System.out.println(<span class=\"string\" style=\"margin: 0px; padding: 0px; border: none; color: blue; background-color: inherit;\">&quot;----程序结束运行----，程序运行时间【&quot;</span><span style=\"margin: 0px; padding: 0px; border: none; background-color: inherit;\">&nbsp;&nbsp;</span></span></p></li><li><p><span style=\"margin: 0px; padding: 0px; border: none; color: black; background-color: inherit;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;+&nbsp;(date2.getTime()&nbsp;-&nbsp;date1.getTime())&nbsp;+&nbsp;<span class=\"string\" style=\"margin: 0px; padding: 0px; border: none; color: blue; background-color: inherit;\">&quot;毫秒】&quot;</span><span style=\"margin: 0px; padding: 0px; border: none; background-color: inherit;\">);&nbsp;&nbsp;</span></span></p></li><li><p><span style=\"margin: 0px; padding: 0px; border: none; color: black; background-color: inherit;\">}&nbsp;&nbsp;</span></p></li><li><p><span style=\"margin: 0px; padding: 0px; border: none; color: black; background-color: inherit;\">}&nbsp;&nbsp;</span></p></li><li><p><span style=\"margin: 0px; padding: 0px; border: none; color: black; background-color: inherit;\">&nbsp;&nbsp;</span></p></li><li><p><span style=\"margin: 0px; padding: 0px; border: none; color: black; background-color: inherit;\"><span class=\"keyword\" style=\"margin: 0px; padding: 0px; border: none; color: rgb(0, 102, 153); background-color: inherit; font-weight: bold;\">class</span><span style=\"margin: 0px; padding: 0px; border: none; background-color: inherit;\">&nbsp;MyCallable&nbsp;</span><span class=\"keyword\" style=\"margin: 0px; padding: 0px; border: none; color: rgb(0, 102, 153); background-color: inherit; font-weight: bold;\">implements</span><span style=\"margin: 0px; padding: 0px; border: none; background-color: inherit;\">&nbsp;Callable&lt;Object&gt;&nbsp;{&nbsp;&nbsp;</span></span></p></li><li><p><span style=\"margin: 0px; padding: 0px; border: none; color: black; background-color: inherit;\"><span class=\"keyword\" style=\"margin: 0px; padding: 0px; border: none; color: rgb(0, 102, 153); background-color: inherit; font-weight: bold;\">private</span><span style=\"margin: 0px; padding: 0px; border: none; background-color: inherit;\">&nbsp;String&nbsp;taskNum;&nbsp;&nbsp;</span></span></p></li><li><p><span style=\"margin: 0px; padding: 0px; border: none; color: black; background-color: inherit;\">&nbsp;&nbsp;</span></p></li><li><p><span style=\"margin: 0px; padding: 0px; border: none; color: black; background-color: inherit;\">MyCallable(String&nbsp;taskNum)&nbsp;{&nbsp;&nbsp;</span></p></li><li><p><span style=\"margin: 0px; padding: 0px; border: none; color: black; background-color: inherit;\">&nbsp;&nbsp;&nbsp;<span class=\"keyword\" style=\"margin: 0px; padding: 0px; border: none; color: rgb(0, 102, 153); background-color: inherit; font-weight: bold;\">this</span><span style=\"margin: 0px; padding: 0px; border: none; background-color: inherit;\">.taskNum&nbsp;=&nbsp;taskNum;&nbsp;&nbsp;</span></span></p></li><li><p><span style=\"margin: 0px; padding: 0px; border: none; color: black; background-color: inherit;\">}&nbsp;&nbsp;</span></p></li><li><p><span style=\"margin: 0px; padding: 0px; border: none; color: black; background-color: inherit;\">&nbsp;&nbsp;</span></p></li><li><p><span style=\"margin: 0px; padding: 0px; border: none; color: black; background-color: inherit;\"><span class=\"keyword\" style=\"margin: 0px; padding: 0px; border: none; color: rgb(0, 102, 153); background-color: inherit; font-weight: bold;\">public</span><span style=\"margin: 0px; padding: 0px; border: none; background-color: inherit;\">&nbsp;Object&nbsp;call()&nbsp;</span><span class=\"keyword\" style=\"margin: 0px; padding: 0px; border: none; color: rgb(0, 102, 153); background-color: inherit; font-weight: bold;\">throws</span><span style=\"margin: 0px; padding: 0px; border: none; background-color: inherit;\">&nbsp;Exception&nbsp;{&nbsp;&nbsp;</span></span></p></li><li><p><span style=\"margin: 0px; padding: 0px; border: none; color: black; background-color: inherit;\">&nbsp;&nbsp;&nbsp;System.out.println(<span class=\"string\" style=\"margin: 0px; padding: 0px; border: none; color: blue; background-color: inherit;\">&quot;&gt;&gt;&gt;&quot;</span><span style=\"margin: 0px; padding: 0px; border: none; background-color: inherit;\">&nbsp;+&nbsp;taskNum&nbsp;+&nbsp;</span><span class=\"string\" style=\"margin: 0px; padding: 0px; border: none; color: blue; background-color: inherit;\">&quot;任务启动&quot;</span><span style=\"margin: 0px; padding: 0px; border: none; background-color: inherit;\">);&nbsp;&nbsp;</span></span></p></li><li><p><span style=\"margin: 0px; padding: 0px; border: none; color: black; background-color: inherit;\">&nbsp;&nbsp;&nbsp;Date&nbsp;dateTmp1&nbsp;=&nbsp;<span class=\"keyword\" style=\"margin: 0px; padding: 0px; border: none; color: rgb(0, 102, 153); background-color: inherit; font-weight: bold;\">new</span><span style=\"margin: 0px; padding: 0px; border: none; background-color: inherit;\">&nbsp;Date();&nbsp;&nbsp;</span></span></p></li><li><p><span style=\"margin: 0px; padding: 0px; border: none; color: black; background-color: inherit;\">&nbsp;&nbsp;&nbsp;Thread.sleep(<span class=\"number\" style=\"margin: 0px; padding: 0px; border: none; color: rgb(192, 0, 0); background-color: inherit;\">1000</span><span style=\"margin: 0px; padding: 0px; border: none; background-color: inherit;\">);&nbsp;&nbsp;</span></span></p></li><li><p><span style=\"margin: 0px; padding: 0px; border: none; color: black; background-color: inherit;\">&nbsp;&nbsp;&nbsp;Date&nbsp;dateTmp2&nbsp;=&nbsp;<span class=\"keyword\" style=\"margin: 0px; padding: 0px; border: none; color: rgb(0, 102, 153); background-color: inherit; font-weight: bold;\">new</span><span style=\"margin: 0px; padding: 0px; border: none; background-color: inherit;\">&nbsp;Date();&nbsp;&nbsp;</span></span></p></li><li><p><span style=\"margin: 0px; padding: 0px; border: none; color: black; background-color: inherit;\">&nbsp;&nbsp;&nbsp;<span class=\"keyword\" style=\"margin: 0px; padding: 0px; border: none; color: rgb(0, 102, 153); background-color: inherit; font-weight: bold;\">long</span><span style=\"margin: 0px; padding: 0px; border: none; background-color: inherit;\">&nbsp;time&nbsp;=&nbsp;dateTmp2.getTime()&nbsp;-&nbsp;dateTmp1.getTime();&nbsp;&nbsp;</span></span></p></li><li><p><span style=\"margin: 0px; padding: 0px; border: none; color: black; background-color: inherit;\">&nbsp;&nbsp;&nbsp;System.out.println(<span class=\"string\" style=\"margin: 0px; padding: 0px; border: none; color: blue; background-color: inherit;\">&quot;&gt;&gt;&gt;&quot;</span><span style=\"margin: 0px; padding: 0px; border: none; background-color: inherit;\">&nbsp;+&nbsp;taskNum&nbsp;+&nbsp;</span><span class=\"string\" style=\"margin: 0px; padding: 0px; border: none; color: blue; background-color: inherit;\">&quot;任务终止&quot;</span><span style=\"margin: 0px; padding: 0px; border: none; background-color: inherit;\">);&nbsp;&nbsp;</span></span></p></li><li><p><span style=\"margin: 0px; padding: 0px; border: none; color: black; background-color: inherit;\">&nbsp;&nbsp;&nbsp;<span class=\"keyword\" style=\"margin: 0px; padding: 0px; border: none; color: rgb(0, 102, 153); background-color: inherit; font-weight: bold;\">return</span><span style=\"margin: 0px; padding: 0px; border: none; background-color: inherit;\">&nbsp;taskNum&nbsp;+&nbsp;</span><span class=\"string\" style=\"margin: 0px; padding: 0px; border: none; color: blue; background-color: inherit;\">&quot;任务返回运行结果,当前任务时间【&quot;</span><span style=\"margin: 0px; padding: 0px; border: none; background-color: inherit;\">&nbsp;+&nbsp;time&nbsp;+&nbsp;</span><span class=\"string\" style=\"margin: 0px; padding: 0px; border: none; color: blue; background-color: inherit;\">&quot;毫秒】&quot;</span><span style=\"margin: 0px; padding: 0px; border: none; background-color: inherit;\">;&nbsp;&nbsp;</span></span></p></li><li><p><span style=\"margin: 0px; padding: 0px; border: none; color: black; background-color: inherit;\">}&nbsp;&nbsp;</span></p></li><li><p><span style=\"margin: 0px; padding: 0px; border: none; color: black; background-color: inherit;\">}&nbsp;&nbsp;</span></p></li></ol><p><span style=\"font-family: Arial; font-size: 14px; background-color: rgb(255, 255, 255);\">代码说明：</span><br/><span style=\"font-family: Arial; font-size: 14px; background-color: rgb(255, 255, 255);\">上述代码中Executors类，提供了一系列工厂方法用于创先线程池，返回的线程池都实现了ExecutorService接口。</span><br/><span style=\"font-family: Arial; font-size: 14px; background-color: rgb(255, 255, 255);\">public static ExecutorService newFixedThreadPool(int nThreads)&nbsp;</span><br/><span style=\"font-family: Arial; font-size: 14px; background-color: rgb(255, 255, 255);\">创建固定数目线程的线程池。</span><br/><span style=\"font-family: Arial; font-size: 14px; background-color: rgb(255, 255, 255);\">public static ExecutorService newCachedThreadPool()&nbsp;</span><br/><span style=\"font-family: Arial; font-size: 14px; background-color: rgb(255, 255, 255);\">创建一个可缓存的线程池，调用execute 将重用以前构造的线程（如果线程可用）。如果现有线程没有可用的，则创建一个新线程并添加到池中。终止并从缓存中移除那些已有 60 秒钟未被使用的线程。</span><br/><span style=\"font-family: Arial; font-size: 14px; background-color: rgb(255, 255, 255);\">public static ExecutorService newSingleThreadExecutor()&nbsp;</span><br/><span style=\"font-family: Arial; font-size: 14px; background-color: rgb(255, 255, 255);\">创建一个单线程化的Executor。</span><br/><span style=\"font-family: Arial; font-size: 14px; background-color: rgb(255, 255, 255);\">public static ScheduledExecutorService newScheduledThreadPool(int corePoolSize)&nbsp;</span><br/><span style=\"font-family: Arial; font-size: 14px; background-color: rgb(255, 255, 255);\">创建一个支持定时及周期性的任务执行的线程池，多数情况下可用来替代Timer类。</span><br/><br/><span style=\"font-family: Arial; font-size: 14px; background-color: rgb(255, 255, 255);\">ExecutoreService提供了submit()方法，传递一个Callable，或Runnable，返回Future。如果Executor后台线程池还没有完成Callable的计算，这调用返回Future对象的get()方法，会阻塞直到计算完成。</span></p><p><br/></p>',0,0,'2017-08-25 12:02:32','多线程',1),(10,'30分钟学会如何使用Shiro','（1）使用用户的登录信息创建令牌UsernamePasswordToken token = new UsernamePasswordToken(username, password);token可以理解为用户令牌，登录的过程被抽象为Shiro验证令牌是否具有合法身份以及相关权限。（2）执行登陆动作Securi','<p style=\"margin: 10px auto; padding: 0px; color: rgb(57, 57, 57); font-family: verdana, &quot;ms song&quot;, Arial, Helvetica, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(250, 247, 239);\">（1）使用用户的登录信息创建令牌</p><pre style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; white-space: pre-wrap; word-wrap: break-word; font-family: &quot;Courier New&quot; !important; font-size: 12px !important;\">UsernamePasswordToken&nbsp;token&nbsp;=&nbsp;new&nbsp;UsernamePasswordToken(username,&nbsp;password);</pre><p style=\"margin: 10px auto; padding: 0px; color: rgb(57, 57, 57); font-family: verdana, &quot;ms song&quot;, Arial, Helvetica, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(250, 247, 239);\">token可以理解为用户令牌，登录的过程被抽象为Shiro验证令牌是否具有合法身份以及相关权限。</p><p style=\"margin: 10px auto; padding: 0px; color: rgb(57, 57, 57); font-family: verdana, &quot;ms song&quot;, Arial, Helvetica, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(250, 247, 239);\">（2）执行登陆动作</p><pre style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; white-space: pre-wrap; word-wrap: break-word; font-family: &quot;Courier New&quot; !important; font-size: 12px !important;\">SecurityUtils.setSecurityManager(securityManager);&nbsp;//&nbsp;注入SecurityManager\nSubject&nbsp;subject&nbsp;=&nbsp;SecurityUtils.getSubject();&nbsp;//&nbsp;获取Subject单例对象\nsubject.login(token);&nbsp;//&nbsp;登陆</pre><p style=\"margin: 10px auto; padding: 0px; color: rgb(57, 57, 57); font-family: verdana, &quot;ms song&quot;, Arial, Helvetica, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(250, 247, 239);\">Shiro的核心部分是SecurityManager，它负责安全认证与授权。Shiro本身已经实现了所有的细节，用户可以完全把它当做一个黑盒来使用。SecurityUtils对象，本质上就是一个工厂类似Spring中的ApplicationContext。Subject是初学者比较难于理解的对象，很多人以为它可以等同于User，其实不然。Subject中文翻译：项目，而正确的理解也恰恰如此。它是你目前所设计的需要通过Shiro保护的项目的一个抽象概念。通过令牌（token）与项目（subject）的登陆（login）关系，Shiro保证了项目整体的安全。</p><p style=\"margin: 10px auto; padding: 0px; color: rgb(57, 57, 57); font-family: verdana, &quot;ms song&quot;, Arial, Helvetica, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(250, 247, 239);\">（3）判断用户</p><p style=\"margin: 10px auto; padding: 0px; color: rgb(57, 57, 57); font-family: verdana, &quot;ms song&quot;, Arial, Helvetica, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(250, 247, 239);\">Shiro本身无法知道所持有令牌的用户是否合法，因为除了项目的设计人员恐怕谁都无法得知。因此Realm是整个框架中为数不多的必须由设计者自行实现的模块，当然Shiro提供了多种实现的途径，本文只介绍最常见也最重要的一种实现方式——数据库查询。</p><p style=\"margin: 10px auto; padding: 0px; color: rgb(57, 57, 57); font-family: verdana, &quot;ms song&quot;, Arial, Helvetica, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(250, 247, 239);\">（4）两条重要的英文</p><p style=\"margin: 10px auto; padding: 0px; color: rgb(57, 57, 57); font-family: verdana, &quot;ms song&quot;, Arial, Helvetica, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(250, 247, 239);\">我在学习Shiro的过程中遇到的第一个障碍就是这两个对象的英文名称：AuthorizationInfo，AuthenticationInfo。不用怀疑自己的眼睛，它们确实长的很像，不但长的像，就连意思都十分近似。</p><p style=\"margin: 10px auto; padding: 0px; color: rgb(57, 57, 57); font-family: verdana, &quot;ms song&quot;, Arial, Helvetica, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(250, 247, 239);\">在解释它们前首先必须要描述一下Shiro对于安全用户的界定：和大多数操作系统一样。用户具有角色和权限两种最基本的属性。例如，我的Windows登陆名称是learnhow，它的角色是administrator，而administrator具有所有系统权限。这样learnhow自然就拥有了所有系统权限。那么其他人需要登录我的电脑怎么办，我可以开放一个guest角色，任何无法提供正确用户名与密码的未知用户都可以通过guest来登录，而系统对于guest角色开放的权限极其有限。</p><p style=\"margin: 10px auto; padding: 0px; color: rgb(57, 57, 57); font-family: verdana, &quot;ms song&quot;, Arial, Helvetica, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(250, 247, 239);\">同理，Shiro对用户的约束也采用了这样的方式。AuthenticationInfo代表了用户的角色信息集合，AuthorizationInfo代表了角色的权限信息集合。如此一来，当设计人员对项目中的某一个url路径设置了只允许某个角色或具有某种权限才可以访问的控制约束的时候，Shiro就可以通过以上两个对象来判断。说到这里，大家可能还比较困惑。先不要着急，继续往后看就自然会明白了。</p><p style=\"margin: 10px auto; padding: 0px; color: rgb(57, 57, 57); font-family: verdana, &quot;ms song&quot;, Arial, Helvetica, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(250, 247, 239);\">二、实现Realm</p><p style=\"margin: 10px auto; padding: 0px; color: rgb(57, 57, 57); font-family: verdana, &quot;ms song&quot;, Arial, Helvetica, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(250, 247, 239);\">如何实现Realm是本文的重头戏，也是比较费事的部分。这里大家会接触到几个新鲜的概念：缓存机制、散列算法、加密算法。由于本文不会专门介绍这些概念，所以这里仅仅抛砖引玉的谈几点，能帮助大家更好的理解Shiro即可。</p><p style=\"margin: 10px auto; padding: 0px; color: rgb(57, 57, 57); font-family: verdana, &quot;ms song&quot;, Arial, Helvetica, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(250, 247, 239);\">（1）缓存机制</p><p style=\"margin: 10px auto; padding: 0px; color: rgb(57, 57, 57); font-family: verdana, &quot;ms song&quot;, Arial, Helvetica, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(250, 247, 239);\">Ehcache是很多Java项目中使用的缓存框架，Hibernate就是其中之一。它的本质就是将原本只能存储在内存中的数据通过算法保存到硬盘上，再根据需求依次取出。你可以把Ehcache理解为一个Map&lt;String,Object&gt;对象，通过put保存对象，再通过get取回对象。</p><p><span class=\"cnblogs_code_copy\" style=\"margin: 0px; padding: 0px 5px 0px 0px; font-size: 12px !important; line-height: 1.5 !important;\"><a title=\"复制代码\" style=\"margin: 0px; padding: 0px; color: rgb(100, 102, 179); text-decoration-line: underline; border: none !important;\"><img src=\"/ueditor/jsp/upload/image/20170825/1503635593841031129.gif\" alt=\"复制代码\"/></a></span></p><pre style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; white-space: pre-wrap; word-wrap: break-word; font-family: &quot;Courier New&quot; !important; font-size: 12px !important;\">&lt;?xml&nbsp;version=&quot;1.0&quot;&nbsp;encoding=&quot;UTF-8&quot;?&gt;&lt;ehcache&nbsp;name=&quot;shirocache&quot;&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;diskStore&nbsp;path=&quot;java.io.tmpdir&quot;&nbsp;/&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;cache&nbsp;name=&quot;passwordRetryCache&quot;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;maxEntriesLocalHeap=&quot;2000&quot;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;eternal=&quot;false&quot;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;timeToIdleSeconds=&quot;1800&quot;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;timeToLiveSeconds=&quot;0&quot;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;overflowToDisk=&quot;false&quot;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;statistics=&quot;true&quot;&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;/cache&gt;&lt;/ehcache&gt;</pre><p><span class=\"cnblogs_code_copy\" style=\"margin: 0px; padding: 0px 5px 0px 0px; font-size: 12px !important; line-height: 1.5 !important;\"><a title=\"复制代码\" style=\"margin: 0px; padding: 0px; color: rgb(100, 102, 179); text-decoration-line: underline; border: none !important;\"><img src=\"/ueditor/jsp/upload/image/20170825/1503635593841031129.gif\" alt=\"复制代码\"/></a></span></p><p style=\"margin: 10px auto; padding: 0px; color: rgb(57, 57, 57); font-family: verdana, &quot;ms song&quot;, Arial, Helvetica, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(250, 247, 239);\">以上是ehcache.xml文件的基础配置，timeToLiveSeconds为缓存的最大生存时间，timeToIdleSeconds为缓存的最大空闲时间，当eternal为false时ttl和tti才可以生效。更多配置的含义大家可以去网上查询。</p><p style=\"margin: 10px auto; padding: 0px; color: rgb(57, 57, 57); font-family: verdana, &quot;ms song&quot;, Arial, Helvetica, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(250, 247, 239);\">（2）散列算法与加密算法</p><p style=\"margin: 10px auto; padding: 0px; color: rgb(57, 57, 57); font-family: verdana, &quot;ms song&quot;, Arial, Helvetica, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(250, 247, 239);\">md5是本文会使用的散列算法，加密算法本文不会涉及。散列和加密本质上都是将一个Object变成一串无意义的字符串，不同点是经过散列的对象无法复原，是一个单向的过程。例如，对密码的加密通常就是使用散列算法，因此用户如果忘记密码只能通过修改而无法获取原始密码。但是对于信息的加密则是正规的加密算法，经过加密的信息是可以通过秘钥解密和还原。</p><p style=\"margin: 10px auto; padding: 0px; color: rgb(57, 57, 57); font-family: verdana, &quot;ms song&quot;, Arial, Helvetica, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(250, 247, 239);\">（3）用户注册</p><p style=\"margin: 10px auto; padding: 0px; color: rgb(57, 57, 57); font-family: verdana, &quot;ms song&quot;, Arial, Helvetica, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(250, 247, 239);\">请注意，虽然我们一直在谈论用户登录的安全性问题，但是说到用户登录首先就是用户注册。如何保证用户注册的信息不丢失，不泄密也是项目设计的重点。</p><p><span class=\"cnblogs_code_copy\" style=\"margin: 0px; padding: 0px 5px 0px 0px; font-size: 12px !important; line-height: 1.5 !important;\"><a title=\"复制代码\" style=\"margin: 0px; padding: 0px; color: rgb(100, 102, 179); text-decoration-line: underline; border: none !important;\"><img src=\"/ueditor/jsp/upload/image/20170825/1503635593841031129.gif\" alt=\"复制代码\"/></a></span></p><pre style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; white-space: pre-wrap; word-wrap: break-word; font-family: &quot;Courier New&quot; !important; font-size: 12px !important;\">public&nbsp;class&nbsp;PasswordHelper&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;private&nbsp;RandomNumberGenerator&nbsp;randomNumberGenerator&nbsp;=&nbsp;new&nbsp;SecureRandomNumberGenerator();&nbsp;&nbsp;&nbsp;&nbsp;private&nbsp;String&nbsp;algorithmName&nbsp;=&nbsp;&quot;md5&quot;;&nbsp;&nbsp;&nbsp;&nbsp;private&nbsp;final&nbsp;int&nbsp;hashIterations&nbsp;=&nbsp;2;&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;void&nbsp;encryptPassword(User&nbsp;user)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;User对象包含最基本的字段Username和Password&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;user.setSalt(randomNumberGenerator.nextBytes().toHex());&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;将用户的注册密码经过散列算法替换成一个不可逆的新密码保存进数据，散列过程使用了盐\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;String&nbsp;newPassword&nbsp;=&nbsp;new&nbsp;SimpleHash(algorithmName,&nbsp;user.getPassword(),\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ByteSource.Util.bytes(user.getCredentialsSalt()),&nbsp;hashIterations).toHex();\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;user.setPassword(newPassword);\n&nbsp;&nbsp;&nbsp;&nbsp;}\n}</pre><p><span class=\"cnblogs_code_copy\" style=\"margin: 0px; padding: 0px 5px 0px 0px; font-size: 12px !important; line-height: 1.5 !important;\"><a title=\"复制代码\" style=\"margin: 0px; padding: 0px; color: rgb(100, 102, 179); text-decoration-line: underline; border: none !important;\"><img src=\"/ueditor/jsp/upload/image/20170825/1503635593841031129.gif\" alt=\"复制代码\"/></a></span></p><p style=\"margin: 10px auto; padding: 0px; color: rgb(57, 57, 57); font-family: verdana, &quot;ms song&quot;, Arial, Helvetica, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(250, 247, 239);\">如果你不清楚什么叫加盐可以忽略散列的过程，只要明白存储在数据库中的密码是根据户注册时填写的密码所产生的一个新字符串就可以了。经过散列后的密码替换用户注册时的密码，然后将User保存进数据库。剩下的工作就丢给UserService来处理。</p><p style=\"margin: 10px auto; padding: 0px; color: rgb(57, 57, 57); font-family: verdana, &quot;ms song&quot;, Arial, Helvetica, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(250, 247, 239);\">那么这样就带来了一个新问题，既然散列算法是无法复原的，当用户登录的时候使用当初注册时的密码，我们又应该如何判断？答案就是需要对用户密码再次以相同的算法散列运算一次，再同数据库中保存的字符串比较。</p><p style=\"margin: 10px auto; padding: 0px; color: rgb(57, 57, 57); font-family: verdana, &quot;ms song&quot;, Arial, Helvetica, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(250, 247, 239);\">（4）匹配</p><p style=\"margin: 10px auto; padding: 0px; color: rgb(57, 57, 57); font-family: verdana, &quot;ms song&quot;, Arial, Helvetica, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(250, 247, 239);\">CredentialsMatcher是一个接口，功能就是用来匹配用户登录使用的令牌和数据库中保存的用户信息是否匹配。当然它的功能不仅如此。本文要介绍的是这个接口的一个实现类：HashedCredentialsMatcher</p><p><span class=\"cnblogs_code_copy\" style=\"margin: 0px; padding: 0px 5px 0px 0px; font-size: 12px !important; line-height: 1.5 !important;\"><a title=\"复制代码\" style=\"margin: 0px; padding: 0px; color: rgb(100, 102, 179); text-decoration-line: underline; border: none !important;\"><img src=\"/ueditor/jsp/upload/image/20170825/1503635593841031129.gif\" alt=\"复制代码\"/></a></span></p><pre style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; white-space: pre-wrap; word-wrap: break-word; font-family: &quot;Courier New&quot; !important; font-size: 12px !important;\">public&nbsp;class&nbsp;RetryLimitHashedCredentialsMatcher&nbsp;extends&nbsp;HashedCredentialsMatcher&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;声明一个缓存接口，这个接口是Shiro缓存管理的一部分，它的具体实现可以通过外部容器注入\n&nbsp;&nbsp;&nbsp;&nbsp;private&nbsp;Cache&lt;String,&nbsp;AtomicInteger&gt;&nbsp;passwordRetryCache;&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;RetryLimitHashedCredentialsMatcher(CacheManager&nbsp;cacheManager)&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;passwordRetryCache&nbsp;=&nbsp;cacheManager.getCache(&quot;passwordRetryCache&quot;);\n&nbsp;&nbsp;&nbsp;&nbsp;}\n\n&nbsp;&nbsp;&nbsp;&nbsp;@Override&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;boolean&nbsp;doCredentialsMatch(AuthenticationToken&nbsp;token,&nbsp;AuthenticationInfo&nbsp;info)&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;String&nbsp;username&nbsp;=&nbsp;(String)&nbsp;token.getPrincipal();\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;AtomicInteger&nbsp;retryCount&nbsp;=&nbsp;passwordRetryCache.get(username);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(retryCount&nbsp;==&nbsp;null)&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;retryCount&nbsp;=&nbsp;new&nbsp;AtomicInteger(0);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;passwordRetryCache.put(username,&nbsp;retryCount);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;自定义一个验证过程：当用户连续输入密码错误5次以上禁止用户登录一段时间\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(retryCount.incrementAndGet()&nbsp;&gt;&nbsp;5)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;throw&nbsp;new&nbsp;ExcessiveAttemptsException();\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;boolean&nbsp;match&nbsp;=&nbsp;super.doCredentialsMatch(token,&nbsp;info);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(match)&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;passwordRetryCache.remove(username);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;match;\n&nbsp;&nbsp;&nbsp;&nbsp;}\n}</pre><p><span class=\"cnblogs_code_copy\" style=\"margin: 0px; padding: 0px 5px 0px 0px; font-size: 12px !important; line-height: 1.5 !important;\"><a title=\"复制代码\" style=\"margin: 0px; padding: 0px; color: rgb(100, 102, 179); text-decoration-line: underline; border: none !important;\"><img src=\"/ueditor/jsp/upload/image/20170825/1503635593841031129.gif\" alt=\"复制代码\"/></a></span></p><p style=\"margin: 10px auto; padding: 0px; color: rgb(57, 57, 57); font-family: verdana, &quot;ms song&quot;, Arial, Helvetica, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(250, 247, 239);\">可以看到，这个实现里设计人员仅仅是增加了一个不允许连续错误登录的判断。真正匹配的过程还是交给它的直接父类去完成。连续登录错误的判断依靠Ehcache缓存来实现。显然match返回true为匹配成功。</p><p style=\"margin: 10px auto; padding: 0px; color: rgb(57, 57, 57); font-family: verdana, &quot;ms song&quot;, Arial, Helvetica, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(250, 247, 239);\">（5）获取用户的角色和权限信息</p><p style=\"margin: 10px auto; padding: 0px; color: rgb(57, 57, 57); font-family: verdana, &quot;ms song&quot;, Arial, Helvetica, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(250, 247, 239);\">说了这么多才到我们的重点Realm，如果你已经理解了Shiro对于用户匹配和注册加密的全过程，真正理解Realm的实现反而比较简单。我们还得回到上文提及的两个非常类似的对象AuthorizationInfo和AuthenticationInfo。因为Realm就是提供这两个对象的地方。</p><p><span class=\"cnblogs_code_copy\" style=\"margin: 0px; padding: 0px 5px 0px 0px; font-size: 12px !important; line-height: 1.5 !important;\"><a title=\"复制代码\" style=\"margin: 0px; padding: 0px; color: rgb(100, 102, 179); text-decoration-line: underline; border: none !important;\"><img src=\"/ueditor/jsp/upload/image/20170825/1503635593841031129.gif\" alt=\"复制代码\"/></a></span></p><pre style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; white-space: pre-wrap; word-wrap: break-word; font-family: &quot;Courier New&quot; !important; font-size: 12px !important;\">public&nbsp;class&nbsp;UserRealm&nbsp;extends&nbsp;AuthorizingRealm&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;用户对应的角色信息与权限信息都保存在数据库中，通过UserService获取数据\n&nbsp;&nbsp;&nbsp;&nbsp;private&nbsp;UserService&nbsp;userService&nbsp;=&nbsp;new&nbsp;UserServiceImpl();&nbsp;&nbsp;&nbsp;&nbsp;/**\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;提供用户信息返回权限信息&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/\n&nbsp;&nbsp;&nbsp;&nbsp;@Override&nbsp;&nbsp;&nbsp;&nbsp;protected&nbsp;AuthorizationInfo&nbsp;doGetAuthorizationInfo(PrincipalCollection&nbsp;principals)&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;String&nbsp;username&nbsp;=&nbsp;(String)&nbsp;principals.getPrimaryPrincipal();\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;SimpleAuthorizationInfo&nbsp;authorizationInfo&nbsp;=&nbsp;new&nbsp;SimpleAuthorizationInfo();&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;根据用户名查询当前用户拥有的角色\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Set&lt;Role&gt;&nbsp;roles&nbsp;=&nbsp;userService.findRoles(username);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Set&lt;String&gt;&nbsp;roleNames&nbsp;=&nbsp;new&nbsp;HashSet&lt;String&gt;();&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for&nbsp;(Role&nbsp;role&nbsp;:&nbsp;roles)&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;roleNames.add(role.getRole());\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;将角色名称提供给info&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;authorizationInfo.setRoles(roleNames);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;根据用户名查询当前用户权限\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Set&lt;Permission&gt;&nbsp;permissions&nbsp;=&nbsp;userService.findPermissions(username);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Set&lt;String&gt;&nbsp;permissionNames&nbsp;=&nbsp;new&nbsp;HashSet&lt;String&gt;();&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for&nbsp;(Permission&nbsp;permission&nbsp;:&nbsp;permissions)&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;permissionNames.add(permission.getPermission());\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;将权限名称提供给info&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;authorizationInfo.setStringPermissions(permissionNames);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;authorizationInfo;\n&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;/**\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;提供账户信息返回认证信息&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/\n&nbsp;&nbsp;&nbsp;&nbsp;@Override&nbsp;&nbsp;&nbsp;&nbsp;protected&nbsp;AuthenticationInfo&nbsp;doGetAuthenticationInfo(AuthenticationToken&nbsp;token)&nbsp;throws&nbsp;AuthenticationException&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;String&nbsp;username&nbsp;=&nbsp;(String)&nbsp;token.getPrincipal();\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;User&nbsp;user&nbsp;=&nbsp;userService.findByUsername(username);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(user&nbsp;==&nbsp;null)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;用户名不存在抛出异常\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;throw&nbsp;new&nbsp;UnknownAccountException();\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(user.getLocked()&nbsp;==&nbsp;0)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;用户被管理员锁定抛出异常\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;throw&nbsp;new&nbsp;LockedAccountException();\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;SimpleAuthenticationInfo&nbsp;authenticationInfo&nbsp;=&nbsp;new&nbsp;SimpleAuthenticationInfo(user.getUsername(),\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;user.getPassword(),&nbsp;ByteSource.Util.bytes(user.getCredentialsSalt()),&nbsp;getName());&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;authenticationInfo;\n&nbsp;&nbsp;&nbsp;&nbsp;}\n}</pre><p><span class=\"cnblogs_code_copy\" style=\"margin: 0px; padding: 0px 5px 0px 0px; font-size: 12px !important; line-height: 1.5 !important;\"><a title=\"复制代码\" style=\"margin: 0px; padding: 0px; color: rgb(100, 102, 179); text-decoration-line: underline; border: none !important;\"><img src=\"/ueditor/jsp/upload/image/20170825/1503635593841031129.gif\" alt=\"复制代码\"/></a></span></p><p style=\"margin: 10px auto; padding: 0px; color: rgb(57, 57, 57); font-family: verdana, &quot;ms song&quot;, Arial, Helvetica, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(250, 247, 239);\">根据Shiro的设计思路，用户与角色之前的关系为多对多，角色与权限之间的关系也是多对多。在数据库中需要因此建立5张表，分别是用户表（存储用户名，密码，盐等）、角色表（角色名称，相关描述等）、权限表（权限名称，相关描述等）、用户-角色对应中间表（以用户ID和角色ID作为联合主键）、角色-权限对应中间表（以角色ID和权限ID作为联合主键）。具体dao与service的实现本文不提供。总之结论就是，Shiro需要根据用户名和密码首先判断登录的用户是否合法，然后再对合法用户授权。而这个过程就是Realm的实现过程。</p><p style=\"margin: 10px auto; padding: 0px; color: rgb(57, 57, 57); font-family: verdana, &quot;ms song&quot;, Arial, Helvetica, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(250, 247, 239);\">（6）会话</p><p style=\"margin: 10px auto; padding: 0px; color: rgb(57, 57, 57); font-family: verdana, &quot;ms song&quot;, Arial, Helvetica, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(250, 247, 239);\">用户的一次登录即为一次会话，Shiro也可以代替Tomcat等容器管理会话。目的是当用户停留在某个页面长时间无动作的时候，再次对任何链接的访问都会被重定向到登录页面要求重新输入用户名和密码而不需要程序员在Servlet中不停的判断Session中是否包含User对象。启用Shiro会话管理的另一个用途是可以针对不同的模块采取不同的会话处理。以淘宝为例，用户注册淘宝以后可以选择记住用户名和密码。之后再次访问就无需登陆。但是如果你要访问支付宝或购物车等链接依然需要用户确认身份。当然，Shiro也可以创建使用容器提供的Session最为实现。</p><p style=\"margin: 10px auto; padding: 0px; color: rgb(57, 57, 57); font-family: verdana, &quot;ms song&quot;, Arial, Helvetica, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(250, 247, 239);\">三、与SpringMVC集成</p><p style=\"margin: 10px auto; padding: 0px; color: rgb(57, 57, 57); font-family: verdana, &quot;ms song&quot;, Arial, Helvetica, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(250, 247, 239);\">有了注册模块和Realm模块的支持，下面就是如何与SpringMVC集成开发。有过框架集成经验的同学一定知道，所谓的集成基本都是一堆xml文件的配置，Shiro也不例外。</p><p style=\"margin: 10px auto; padding: 0px; color: rgb(57, 57, 57); font-family: verdana, &quot;ms song&quot;, Arial, Helvetica, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(250, 247, 239);\">（1）配置前端过滤器</p><p style=\"margin: 10px auto; padding: 0px; color: rgb(57, 57, 57); font-family: verdana, &quot;ms song&quot;, Arial, Helvetica, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(250, 247, 239);\">先说一个题外话，Filter是过滤器，interceptor是拦截器。前者基于回调函数实现，必须依靠容器支持。因为需要容器装配好整条FilterChain并逐个调用。后者基于代理实现，属于AOP的范畴。</p><p style=\"margin: 10px auto; padding: 0px; color: rgb(57, 57, 57); font-family: verdana, &quot;ms song&quot;, Arial, Helvetica, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(250, 247, 239);\">如果希望在WEB环境中使用Shiro必须首先在web.xml文件中配置</p><p><span class=\"cnblogs_code_copy\" style=\"margin: 0px; padding: 0px 5px 0px 0px; font-size: 12px !important; line-height: 1.5 !important;\"><a title=\"复制代码\" style=\"margin: 0px; padding: 0px; color: rgb(100, 102, 179); text-decoration-line: underline; border: none !important;\"><img src=\"/ueditor/jsp/upload/image/20170825/1503635593841031129.gif\" alt=\"复制代码\"/></a></span></p><pre style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; white-space: pre-wrap; word-wrap: break-word; font-family: &quot;Courier New&quot; !important; font-size: 12px !important;\">&lt;?xml&nbsp;version=&quot;1.0&quot;&nbsp;encoding=&quot;UTF-8&quot;?&gt;&lt;web-app&nbsp;xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;\n&nbsp;&nbsp;&nbsp;&nbsp;xmlns=&quot;http://java.sun.com/xml/ns/javaee&quot;\n&nbsp;&nbsp;&nbsp;&nbsp;xsi:schemaLocation=&quot;http://java.sun.com/xml/ns/javaee&nbsp;http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd&quot;\n&nbsp;&nbsp;&nbsp;&nbsp;id=&quot;WebApp_ID&quot;&nbsp;version=&quot;3.0&quot;&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;display-name&gt;Shiro_Project&lt;/display-name&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;welcome-file-list&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;welcome-file&gt;index.jsp&lt;/welcome-file&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;/welcome-file-list&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;servlet&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;servlet-name&gt;SpringMVC&lt;/servlet-name&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;servlet-class&gt;org.springframework.web.servlet.DispatcherServlet&lt;/servlet-class&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;init-param&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;param-name&gt;contextConfigLocation&lt;/param-name&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;param-value&gt;classpath:springmvc.xml&lt;/param-value&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/init-param&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;load-on-startup&gt;1&lt;/load-on-startup&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;async-supported&gt;true&lt;/async-supported&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;/servlet&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;servlet-mapping&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;servlet-name&gt;SpringMVC&lt;/servlet-name&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;url-pattern&gt;/&lt;/url-pattern&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;/servlet-mapping&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;listener&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;listener-class&gt;org.springframework.web.context.ContextLoaderListener&lt;/listener-class&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;/listener&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;listener&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;listener-class&gt;org.springframework.web.util.Log4jConfigListener&lt;/listener-class&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;/listener&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;context-param&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;param-name&gt;contextConfigLocation&lt;/param-name&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;!--&nbsp;将Shiro的配置文件交给Spring监听器初始化&nbsp;--&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;param-value&gt;classpath:spring.xml,classpath:spring-shiro-web.xml&lt;/param-value&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;/context-param&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;context-param&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;param-name&gt;log4jConfigLoaction&lt;/param-name&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;param-value&gt;classpath:log4j.properties&lt;/param-value&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;/context-param&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;!--&nbsp;shiro配置&nbsp;开始&nbsp;--&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;filter&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;filter-name&gt;shiroFilter&lt;/filter-name&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;filter-class&gt;org.springframework.web.filter.DelegatingFilterProxy&lt;/filter-class&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;async-supported&gt;true&lt;/async-supported&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;init-param&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;param-name&gt;targetFilterLifecycle&lt;/param-name&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;param-value&gt;true&lt;/param-value&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/init-param&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;/filter&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;filter-mapping&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;filter-name&gt;shiroFilter&lt;/filter-name&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;url-pattern&gt;/*&lt;/url-pattern&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;/filter-mapping&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;!--&nbsp;shiro配置&nbsp;结束&nbsp;--&gt;&lt;/web-app&gt;</pre><p><span class=\"cnblogs_code_copy\" style=\"margin: 0px; padding: 0px 5px 0px 0px; font-size: 12px !important; line-height: 1.5 !important;\"><a title=\"复制代码\" style=\"margin: 0px; padding: 0px; color: rgb(100, 102, 179); text-decoration-line: underline; border: none !important;\"><img src=\"/ueditor/jsp/upload/image/20170825/1503635593841031129.gif\" alt=\"复制代码\"/></a></span></p><p style=\"margin: 10px auto; padding: 0px; color: rgb(57, 57, 57); font-family: verdana, &quot;ms song&quot;, Arial, Helvetica, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(250, 247, 239);\">熟悉Spring配置的同学可以重点看有绿字注释的部分，这里是使Shiro生效的关键。由于项目通过Spring管理，因此所有的配置原则上都是交给Spring。DelegatingFilterProxy的功能是通知Spring将所有的Filter交给ShiroFilter管理。</p><p style=\"margin: 10px auto; padding: 0px; color: rgb(57, 57, 57); font-family: verdana, &quot;ms song&quot;, Arial, Helvetica, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(250, 247, 239);\">接着在classpath路径下配置spring-shiro-web.xml文件</p><p><span class=\"cnblogs_code_copy\" style=\"margin: 0px; padding: 0px 5px 0px 0px; font-size: 12px !important; line-height: 1.5 !important;\"><a title=\"复制代码\" style=\"margin: 0px; padding: 0px; color: rgb(100, 102, 179); text-decoration-line: underline; border: none !important;\"><img src=\"/ueditor/jsp/upload/image/20170825/1503635593841031129.gif\" alt=\"复制代码\"/></a></span></p><pre style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; white-space: pre-wrap; word-wrap: break-word; font-family: &quot;Courier New&quot; !important; font-size: 12px !important;\">&lt;beans&nbsp;xmlns=&quot;http://www.springframework.org/schema/beans&quot;\n&nbsp;&nbsp;&nbsp;&nbsp;xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&nbsp;xmlns:p=&quot;http://www.springframework.org/schema/p&quot;\n&nbsp;&nbsp;&nbsp;&nbsp;xmlns:context=&quot;http://www.springframework.org/schema/context&quot;\n&nbsp;&nbsp;&nbsp;&nbsp;xmlns:mvc=&quot;http://www.springframework.org/schema/mvc&quot;\n&nbsp;&nbsp;&nbsp;&nbsp;xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans&nbsp;&nbsp;&nbsp;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;http://www.springframework.org/schema/beans/spring-beans-3.1.xsd&nbsp;&nbsp;&nbsp;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;http://www.springframework.org/schema/context&nbsp;&nbsp;&nbsp;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;http://www.springframework.org/schema/context/spring-context-3.1.xsd&nbsp;&nbsp;&nbsp;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;http://www.springframework.org/schema/mvc&nbsp;&nbsp;&nbsp;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd&quot;&gt;\n\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;!--&nbsp;缓存管理器&nbsp;使用Ehcache实现&nbsp;--&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;bean&nbsp;id=&quot;cacheManager&quot;&nbsp;class=&quot;org.apache.shiro.cache.ehcache.EhCacheManager&quot;&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;property&nbsp;name=&quot;cacheManagerConfigFile&quot;&nbsp;value=&quot;classpath:ehcache.xml&quot;&nbsp;/&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;/bean&gt;\n\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;!--&nbsp;凭证匹配器&nbsp;--&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;bean&nbsp;id=&quot;credentialsMatcher&quot;&nbsp;class=&quot;utils.RetryLimitHashedCredentialsMatcher&quot;&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;constructor-arg&nbsp;ref=&quot;cacheManager&quot;&nbsp;/&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;property&nbsp;name=&quot;hashAlgorithmName&quot;&nbsp;value=&quot;md5&quot;&nbsp;/&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;property&nbsp;name=&quot;hashIterations&quot;&nbsp;value=&quot;2&quot;&nbsp;/&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;property&nbsp;name=&quot;storedCredentialsHexEncoded&quot;&nbsp;value=&quot;true&quot;&nbsp;/&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;/bean&gt;\n\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;!--&nbsp;Realm实现&nbsp;--&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;bean&nbsp;id=&quot;userRealm&quot;&nbsp;class=&quot;utils.UserRealm&quot;&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;property&nbsp;name=&quot;credentialsMatcher&quot;&nbsp;ref=&quot;credentialsMatcher&quot;&nbsp;/&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;/bean&gt;\n\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;!--&nbsp;安全管理器&nbsp;--&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;bean&nbsp;id=&quot;securityManager&quot;&nbsp;class=&quot;org.apache.shiro.web.mgt.DefaultWebSecurityManager&quot;&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;property&nbsp;name=&quot;realm&quot;&nbsp;ref=&quot;userRealm&quot;&nbsp;/&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;/bean&gt;\n\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;!--&nbsp;Shiro的Web过滤器&nbsp;--&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;bean&nbsp;id=&quot;shiroFilter&quot;&nbsp;class=&quot;org.apache.shiro.spring.web.ShiroFilterFactoryBean&quot;&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;property&nbsp;name=&quot;securityManager&quot;&nbsp;ref=&quot;securityManager&quot;&nbsp;/&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;property&nbsp;name=&quot;loginUrl&quot;&nbsp;value=&quot;/&quot;&nbsp;/&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;property&nbsp;name=&quot;unauthorizedUrl&quot;&nbsp;value=&quot;/&quot;&nbsp;/&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;property&nbsp;name=&quot;filterChainDefinitions&quot;&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;value&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/authc/admin&nbsp;=&nbsp;roles[admin]\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/authc/**&nbsp;=&nbsp;authc\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/**&nbsp;=&nbsp;anon&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/value&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/property&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;/bean&gt;\n\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;bean&nbsp;id=&quot;lifecycleBeanPostProcessor&quot;&nbsp;class=&quot;org.apache.shiro.spring.LifecycleBeanPostProcessor&quot;&nbsp;/&gt;&lt;/beans&gt;</pre><p><span class=\"cnblogs_code_copy\" style=\"margin: 0px; padding: 0px 5px 0px 0px; font-size: 12px !important; line-height: 1.5 !important;\"><a title=\"复制代码\" style=\"margin: 0px; padding: 0px; color: rgb(100, 102, 179); text-decoration-line: underline; border: none !important;\"><img src=\"/ueditor/jsp/upload/image/20170825/1503635593841031129.gif\" alt=\"复制代码\"/></a></span></p><p style=\"margin: 10px auto; padding: 0px; color: rgb(57, 57, 57); font-family: verdana, &quot;ms song&quot;, Arial, Helvetica, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(250, 247, 239);\">需要注意filterChainDefinitions过滤器中对于路径的配置是有顺序的，当找到匹配的条目之后容器不会再继续寻找。因此带有通配符的路径要放在后面。三条配置的含义是： /authc/admin需要用户有用admin权限、/authc/**用户必须登录才能访问、/**其他所有路径任何人都可以访问。</p><p style=\"margin: 10px auto; padding: 0px; color: rgb(57, 57, 57); font-family: verdana, &quot;ms song&quot;, Arial, Helvetica, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(250, 247, 239);\">说了这么多，大家一定关心在Spring中引入Shiro之后到底如何编写登录代码呢。</p><p><span class=\"cnblogs_code_copy\" style=\"margin: 0px; padding: 0px 5px 0px 0px; font-size: 12px !important; line-height: 1.5 !important;\"><a title=\"复制代码\" style=\"margin: 0px; padding: 0px; color: rgb(100, 102, 179); text-decoration-line: underline; border: none !important;\"><img src=\"/ueditor/jsp/upload/image/20170825/1503635593841031129.gif\" alt=\"复制代码\"/></a></span></p><pre style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; white-space: pre-wrap; word-wrap: break-word; font-family: &quot;Courier New&quot; !important; font-size: 12px !important;\">@Controllerpublic&nbsp;class&nbsp;LoginController&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;@Autowired&nbsp;&nbsp;&nbsp;&nbsp;private&nbsp;UserService&nbsp;userService;\n\n&nbsp;&nbsp;&nbsp;&nbsp;@RequestMapping(&quot;login&quot;)&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;ModelAndView&nbsp;login(@RequestParam(&quot;username&quot;)&nbsp;String&nbsp;username,&nbsp;@RequestParam(&quot;password&quot;)&nbsp;String&nbsp;password)&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;UsernamePasswordToken&nbsp;token&nbsp;=&nbsp;new&nbsp;UsernamePasswordToken(username,&nbsp;password);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Subject&nbsp;subject&nbsp;=&nbsp;SecurityUtils.getSubject();&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;try&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;subject.login(token);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;catch&nbsp;(IncorrectCredentialsException&nbsp;ice)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;捕获密码错误异常\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ModelAndView&nbsp;mv&nbsp;=&nbsp;new&nbsp;ModelAndView(&quot;error&quot;);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mv.addObject(&quot;message&quot;,&nbsp;&quot;password&nbsp;error!&quot;);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;mv;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;catch&nbsp;(UnknownAccountException&nbsp;uae)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;捕获未知用户名异常\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ModelAndView&nbsp;mv&nbsp;=&nbsp;new&nbsp;ModelAndView(&quot;error&quot;);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mv.addObject(&quot;message&quot;,&nbsp;&quot;username&nbsp;error!&quot;);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;mv;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;catch&nbsp;(ExcessiveAttemptsException&nbsp;eae)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;捕获错误登录过多的异常\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ModelAndView&nbsp;mv&nbsp;=&nbsp;new&nbsp;ModelAndView(&quot;error&quot;);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mv.addObject(&quot;message&quot;,&nbsp;&quot;times&nbsp;error&quot;);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;mv;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;User&nbsp;user&nbsp;=&nbsp;userService.findByUsername(username);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;subject.getSession().setAttribute(&quot;user&quot;,&nbsp;user);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;new&nbsp;ModelAndView(&quot;success&quot;);\n&nbsp;&nbsp;&nbsp;&nbsp;}\n}</pre><p><span class=\"cnblogs_code_copy\" style=\"margin: 0px; padding: 0px 5px 0px 0px; font-size: 12px !important; line-height: 1.5 !important;\"><a title=\"复制代码\" style=\"margin: 0px; padding: 0px; color: rgb(100, 102, 179); text-decoration-line: underline; border: none !important;\"><img src=\"/ueditor/jsp/upload/image/20170825/1503635593841031129.gif\" alt=\"复制代码\"/></a></span></p><p style=\"margin: 10px auto; padding: 0px; color: rgb(57, 57, 57); font-family: verdana, &quot;ms song&quot;, Arial, Helvetica, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(250, 247, 239);\">登录完成以后，当前用户信息被保存进Session。这个Session是通过Shiro管理的会话对象，要获取依然必须通过Shiro。传统的Session中不存在User对象。</p><p><span class=\"cnblogs_code_copy\" style=\"margin: 0px; padding: 0px 5px 0px 0px; font-size: 12px !important; line-height: 1.5 !important;\"><a title=\"复制代码\" style=\"margin: 0px; padding: 0px; color: rgb(100, 102, 179); text-decoration-line: underline; border: none !important;\"><img src=\"/ueditor/jsp/upload/image/20170825/1503635593841031129.gif\" alt=\"复制代码\"/></a></span></p><pre style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; white-space: pre-wrap; word-wrap: break-word; font-family: &quot;Courier New&quot; !important; font-size: 12px !important;\">@Controller\n@RequestMapping(&quot;authc&quot;)public&nbsp;class&nbsp;AuthcController&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;/authc/**&nbsp;=&nbsp;authc&nbsp;任何通过表单登录的用户都可以访问\n&nbsp;&nbsp;&nbsp;&nbsp;@RequestMapping(&quot;anyuser&quot;)&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;ModelAndView&nbsp;anyuser()&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Subject&nbsp;subject&nbsp;=&nbsp;SecurityUtils.getSubject();\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;User&nbsp;user&nbsp;=&nbsp;(User)&nbsp;subject.getSession().getAttribute(&quot;user&quot;);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(user);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;new&nbsp;ModelAndView(&quot;inner&quot;);\n&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;/authc/admin&nbsp;=&nbsp;user[admin]&nbsp;只有具备admin角色的用户才可以访问，否则请求将被重定向至登录界面\n&nbsp;&nbsp;&nbsp;&nbsp;@RequestMapping(&quot;admin&quot;)&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;ModelAndView&nbsp;admin()&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Subject&nbsp;subject&nbsp;=&nbsp;SecurityUtils.getSubject();\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;User&nbsp;user&nbsp;=&nbsp;(User)&nbsp;subject.getSession().getAttribute(&quot;user&quot;);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(user);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;new&nbsp;ModelAndView(&quot;inner&quot;);\n&nbsp;&nbsp;&nbsp;&nbsp;}\n}</pre><p><br/></p>',1,0,'2017-08-25 12:33:27','shiro',1),(14,'Java虚拟机','虚拟机是一种抽象化的计算机，通过在实际的计算机上仿真模拟各种计算机功能来实现的。Java虚拟机有自己完善的硬体架构，如处理器、堆栈、寄存器等，还具有相应的指令系统。Java虚拟机屏蔽了与具体操作系统平台相关的信息，使得Java程序只需生成在Java虚拟机上运行的目标代码（字节码），就可以在多种平台上不加修改地','<p><span style=\"color: rgb(51, 51, 51); font-family: arial, 宋体, sans-serif; font-size: 14px; text-indent: 28px; background-color: rgb(255, 255, 255);\">虚拟机是一种抽象化的计算机，通过在实际的计算机上仿真模拟各种计算机功能来实现的。Java虚拟机有自己完善的硬体架构，如</span><a target=\"_blank\" href=\"https://baike.baidu.com/item/%E5%A4%84%E7%90%86%E5%99%A8\" style=\"color: rgb(19, 110, 194); text-decoration-line: none; font-family: arial, 宋体, sans-serif; font-size: 14px; text-indent: 28px; white-space: normal; background-color: rgb(255, 255, 255);\">处理器</a><span style=\"color: rgb(51, 51, 51); font-family: arial, 宋体, sans-serif; font-size: 14px; text-indent: 28px; background-color: rgb(255, 255, 255);\">、</span><a target=\"_blank\" href=\"https://baike.baidu.com/item/%E5%A0%86%E6%A0%88\" style=\"color: rgb(19, 110, 194); text-decoration-line: none; font-family: arial, 宋体, sans-serif; font-size: 14px; text-indent: 28px; white-space: normal; background-color: rgb(255, 255, 255);\">堆栈</a><span style=\"color: rgb(51, 51, 51); font-family: arial, 宋体, sans-serif; font-size: 14px; text-indent: 28px; background-color: rgb(255, 255, 255);\">、</span><a target=\"_blank\" href=\"https://baike.baidu.com/item/%E5%AF%84%E5%AD%98%E5%99%A8\" style=\"color: rgb(19, 110, 194); text-decoration-line: none; font-family: arial, 宋体, sans-serif; font-size: 14px; text-indent: 28px; white-space: normal; background-color: rgb(255, 255, 255);\">寄存器</a><span style=\"color: rgb(51, 51, 51); font-family: arial, 宋体, sans-serif; font-size: 14px; text-indent: 28px; background-color: rgb(255, 255, 255);\">等，还具有相应的</span><a target=\"_blank\" href=\"https://baike.baidu.com/item/%E6%8C%87%E4%BB%A4\" style=\"color: rgb(19, 110, 194); text-decoration-line: none; font-family: arial, 宋体, sans-serif; font-size: 14px; text-indent: 28px; white-space: normal; background-color: rgb(255, 255, 255);\">指令</a><span style=\"color: rgb(51, 51, 51); font-family: arial, 宋体, sans-serif; font-size: 14px; text-indent: 28px; background-color: rgb(255, 255, 255);\">系统。Java虚拟机屏蔽了与具体操作系统平台相关的信息，使得Java程序只需生成在Java虚拟机上运行的目标代码（</span><a target=\"_blank\" href=\"https://baike.baidu.com/item/%E5%AD%97%E8%8A%82%E7%A0%81\" style=\"color: rgb(19, 110, 194); text-decoration-line: none; font-family: arial, 宋体, sans-serif; font-size: 14px; text-indent: 28px; white-space: normal; background-color: rgb(255, 255, 255);\">字节码</a><span style=\"color: rgb(51, 51, 51); font-family: arial, 宋体, sans-serif; font-size: 14px; text-indent: 28px; background-color: rgb(255, 255, 255);\">），就可以在多种平台上不加修改地运行。</span></p>',1,0,'2017-08-25 21:07:33','虚拟机',1),(15,'Java技术 测试修改','测试分页1 测试修改','<p>测试分页1 测试修改<img src=\"/static/userImages/20170826/1503738960155060385.jpg\" title=\"1503738960155060385.jpg\" alt=\"ae326e9b1c9a5122428c8afd085ab1b8.jpg\"/></p>',5,0,'2017-08-25 21:08:07','测试 ceshi修改',2),(18,'Java','Java是一门面向对象编程语言，不仅吸收了C++语言的各种优点，还摒弃了C++里难以理解的多继承、指针等概念，因此Java语言具有功能强大和简单易用两个特征。Java语言作为静态面向对象编程语言的代表，极好地实现了面向对象理论，允许程序员以优雅的思维方式进行复杂的编程[1]  。Java具有简单性、面向对象、','<p><a target=\"_blank\" href=\"https://baike.baidu.com/item/Java/85979\" style=\"color: rgb(19, 110, 194); text-decoration-line: none;\">Java</a>是一门<a target=\"_blank\" href=\"https://baike.baidu.com/item/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1\" style=\"color: rgb(19, 110, 194); text-decoration-line: none;\">面向对象</a>编程语言，不仅吸收了<a target=\"_blank\" href=\"https://baike.baidu.com/item/C%2B%2B\" style=\"color: rgb(19, 110, 194); text-decoration-line: none;\">C++</a>语言的各种优点，还摒弃了C++里难以理解的<a target=\"_blank\" href=\"https://baike.baidu.com/item/%E5%A4%9A%E7%BB%A7%E6%89%BF\" style=\"color: rgb(19, 110, 194); text-decoration-line: none;\">多继承</a>、<a target=\"_blank\" href=\"https://baike.baidu.com/item/%E6%8C%87%E9%92%88\" style=\"color: rgb(19, 110, 194); text-decoration-line: none;\">指针</a>等概念，因此Java语言具有功能强大和简单易用两个特征。Java语言作为静态面向对象编程语言的代表，极好地实现了面向对象理论，允许程序员以优雅的思维方式进行复杂的编程<span style=\"font-size: 12px; line-height: 0; position: relative; vertical-align: baseline; top: -0.5em; margin-left: 2px; color: rgb(51, 102, 204); cursor: default; padding: 0px 2px;\">[1]</span><a class=\"sup-anchor\" style=\"color: rgb(19, 110, 194); position: relative; top: -50px; font-size: 0px; line-height: 0;\">&nbsp;</a>&nbsp;。</p><p>Java具有简单性、面向对象、<a target=\"_blank\" href=\"https://baike.baidu.com/item/%E5%88%86%E5%B8%83%E5%BC%8F/19276232\" style=\"color: rgb(19, 110, 194); text-decoration-line: none;\">分布式</a>、<a target=\"_blank\" href=\"https://baike.baidu.com/item/%E5%81%A5%E5%A3%AE%E6%80%A7\" style=\"color: rgb(19, 110, 194); text-decoration-line: none;\">健壮性</a>、<a target=\"_blank\" href=\"https://baike.baidu.com/item/%E5%AE%89%E5%85%A8%E6%80%A7\" style=\"color: rgb(19, 110, 194); text-decoration-line: none;\">安全性</a>、平台独立与可移植性、<a target=\"_blank\" href=\"https://baike.baidu.com/item/%E5%A4%9A%E7%BA%BF%E7%A8%8B\" style=\"color: rgb(19, 110, 194); text-decoration-line: none;\">多线程</a>、动态性等特点。Java可以编写<a target=\"_blank\" href=\"https://baike.baidu.com/item/%E6%A1%8C%E9%9D%A2%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F\" style=\"color: rgb(19, 110, 194); text-decoration-line: none;\">桌面应用程序</a>、<a target=\"_blank\" href=\"https://baike.baidu.com/item/Web%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F\" style=\"color: rgb(19, 110, 194); text-decoration-line: none;\">Web应用程序</a>、<a target=\"_blank\" href=\"https://baike.baidu.com/item/%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F\" style=\"color: rgb(19, 110, 194); text-decoration-line: none;\">分布式系统</a>和<a target=\"_blank\" href=\"https://baike.baidu.com/item/%E5%B5%8C%E5%85%A5%E5%BC%8F%E7%B3%BB%E7%BB%9F\" style=\"color: rgb(19, 110, 194); text-decoration-line: none;\">嵌入式系统</a>应用程序等</p><p><br/></p>',4,0,'2017-08-28 17:55:30','Java',1);

/*Table structure for table `blog_type` */

DROP TABLE IF EXISTS `blog_type`;

CREATE TABLE `blog_type` (
  `type_id` int(30) NOT NULL AUTO_INCREMENT,
  `type_name` varchar(30) DEFAULT NULL,
  `ordinal` int(30) DEFAULT NULL,
  PRIMARY KEY (`type_id`)
) ENGINE=InnoDB AUTO_INCREMENT=6 DEFAULT CHARSET=utf8;

/*Data for the table `blog_type` */

insert  into `blog_type`(`type_id`,`type_name`,`ordinal`) values (1,'J2SE',1),(2,'Mybatis57687',2),(5,'mybatis',2);

/*Table structure for table `blogger` */

DROP TABLE IF EXISTS `blogger`;

CREATE TABLE `blogger` (
  `blogger_id` int(30) NOT NULL AUTO_INCREMENT,
  `blogger_name` varchar(40) DEFAULT NULL,
  `password` varchar(100) DEFAULT NULL,
  `profile` text,
  `nickname` varchar(30) DEFAULT NULL,
  `signature` varchar(50) DEFAULT NULL,
  `image_path` varchar(100) DEFAULT NULL,
  PRIMARY KEY (`blogger_id`)
) ENGINE=InnoDB AUTO_INCREMENT=2 DEFAULT CHARSET=utf8;

/*Data for the table `blogger` */

insert  into `blogger`(`blogger_id`,`blogger_name`,`password`,`profile`,`nickname`,`signature`,`image_path`) values (1,'yang','af5542bbd480ccca78cd6abd617d9120','<p>帅哥2222</p>','临风','用技术改变世界','20170828044439.jpg');

/*Table structure for table `comment` */

DROP TABLE IF EXISTS `comment`;

CREATE TABLE `comment` (
  `comment_id` int(30) NOT NULL AUTO_INCREMENT,
  `user_ip` varchar(60) DEFAULT NULL,
  `comment_content` varchar(1000) DEFAULT NULL,
  `blog_id` int(30) DEFAULT NULL,
  `release_date` datetime DEFAULT NULL,
  `state` int(30) DEFAULT NULL,
  PRIMARY KEY (`comment_id`)
) ENGINE=InnoDB AUTO_INCREMENT=7 DEFAULT CHARSET=utf8;

/*Data for the table `comment` */

insert  into `comment`(`comment_id`,`user_ip`,`comment_content`,`blog_id`,`release_date`,`state`) values (2,'12.21.21','好极了',4,'2017-08-23 23:06:48',1),(3,'127.0.0.1','呵呵呵呵',4,'2017-08-23 23:48:57',1),(4,'127.0.0.1','呵呵',4,'2017-08-23 23:50:27',1),(5,'21.323.2','测试',4,'2017-08-27 13:01:43',1),(6,'34.67.21','ceshi',4,'2017-08-27 16:38:14',2);

/*Table structure for table `link` */

DROP TABLE IF EXISTS `link`;

CREATE TABLE `link` (
  `link_id` int(30) NOT NULL AUTO_INCREMENT,
  `link_name` varchar(40) DEFAULT NULL,
  `link_url` varchar(200) DEFAULT NULL,
  `ordinal` int(30) DEFAULT NULL,
  PRIMARY KEY (`link_id`)
) ENGINE=InnoDB AUTO_INCREMENT=2 DEFAULT CHARSET=utf8;

/*Data for the table `link` */

insert  into `link`(`link_id`,`link_name`,`link_url`,`ordinal`) values (1,'easyicon','http://www.easyicon.net/',1);

/*!40101 SET SQL_MODE=@OLD_SQL_MODE */;
/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */;
/*!40014 SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS */;
/*!40111 SET SQL_NOTES=@OLD_SQL_NOTES */;
